open import Labels
open import Types
open import PreCastStructure using ()
open import CastStructure

open import Data.Nat using ()
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Bool
open import Variables
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_;_‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Empty.Irrelevant renaming (‚ä•-elim to ‚ä•-elimi)

module ParamCastDeterministic (cs : CastStruct) where
  open CastStruct cs
  open import ParamCastCalculus Cast Inert
  open import ParamCastAux precast
  open import ParamCastReduction cs 

  value? : ‚àÄ{Œì : Context}{A : Type} ‚Üí (M : Œì ‚ä¢ A) ‚Üí Dec (Value M)
  value? (` x) = no (Œª ())
  value? (∆õ M) = yes V-∆õ
  value? (M ¬∑ M‚ÇÅ) = no (Œª ())
  value? ($ x) = yes V-const
  value? (if M M‚ÇÅ M‚ÇÇ) = no (Œª ())
  value? (cons M‚ÇÅ M‚ÇÇ)
      with value? M‚ÇÅ | value? M‚ÇÇ
  ... | yes m1v | yes m2v = yes (V-pair m1v m2v)
  ... | yes m1v | no m2v = no Œª {(V-pair a b) ‚Üí m2v b }
  ... | no m1nv | _ = no Œª { (V-pair a b) ‚Üí m1nv a }
  value? (fst M) = no (Œª ())
  value? (snd M) = no (Œª ())
  value? (inl M)
      with value? M
  ... | yes mv = yes (V-inl mv)
  ... | no mv = no Œª { (V-inl a) ‚Üí mv a }
  value? (inr M)
      with value? M
  ... | yes mv = yes (V-inr mv)
  ... | no mv = no Œª { (V-inr a) ‚Üí mv a }
  value? (case M M‚ÇÅ M‚ÇÇ) = no (Œª ())
  value? (M ‚ü® x ‚ü©) = no (Œª ())
  value? (M ‚ü™ x ‚ü´)
      with value? M
  ... | yes mv = yes (V-wrap mv x)
  ... | no mv = no Œª { (V-wrap a b) ‚Üí mv a }
  value? (blame x) = no (Œª ())

  blame? : ‚àÄ{Œì : Context}{A : Type} ‚Üí (M : Œì ‚ä¢ A)
      ‚Üí Dec (Œ£[ ‚Ñì ‚àà Label ] M ‚â° blame ‚Ñì)
  blame? (` x) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (∆õ M) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (M ¬∑ M‚ÇÅ) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? ($ x) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (if M M‚ÇÅ M‚ÇÇ) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (cons M M‚ÇÅ) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (fst M) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (snd M) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (inl M) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (inr M) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (case M M‚ÇÅ M‚ÇÇ) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (M ‚ü® x ‚ü©) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (M ‚ü™ x ‚ü´) = no Œª { ‚ü® ‚Ñì , ()‚ü© }
  blame? (blame ‚Ñì) = yes (‚ü® ‚Ñì , refl ‚ü©)

  plug-not-value : ‚àÄ{Œì}{A B : Type}{M : Œì ‚ä¢ A}{F : Frame A B} ‚Üí ¬¨ Value M ‚Üí ¬¨ Value (plug M F)
  plug-not-value {F = F-√ó‚ÇÅ M v} nvm (V-pair vp vp‚ÇÅ) = nvm vp‚ÇÅ
  plug-not-value {F = F-√ó‚ÇÇ x} nvm (V-pair vp vp‚ÇÅ) = nvm vp
  plug-not-value {F = F-inl} nvm (V-inl a) = nvm a
  plug-not-value {F = F-inr} nvm (V-inr a) = nvm a
  plug-not-value {F = F-wrap i} nvm (V-wrap a b) = nvm a

  plug-not-var : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A} {F : Frame {Œì} A B} {x}
    ‚Üí plug M F ‚â¢ ` x
  plug-not-var {F = F-¬∑‚ÇÅ x} ()
  plug-not-var {F = F-¬∑‚ÇÇ M} ()
  plug-not-var {F = F-if x x‚ÇÅ} ()
  plug-not-var {F = F-√ó‚ÇÅ M v} ()
  plug-not-var {F = F-√ó‚ÇÇ x} ()
  plug-not-var {F = F-fst} ()
  plug-not-var {F = F-snd} ()
  plug-not-var {F = F-inl} ()
  plug-not-var {F = F-inr} ()
  plug-not-var {F = F-case x x‚ÇÅ} ()
  plug-not-var {F = F-cast x} ()
  plug-not-var {F = F-wrap i} ()

  canonical-base : ‚àÄ{Œì}{Œπ : Base}{M : Œì ‚ä¢ ` Œπ} (v : Value M)
      ‚Üí Œ£[ k ‚àà rep (` Œπ)] Œ£[ p ‚àà Prim (` Œπ)] M ‚â° $_ k {p}
  canonical-base (V-const{k = k}{f = f}) = ‚ü® k , ‚ü® f , refl ‚ü© ‚ü©
  canonical-base (V-wrap {c = c} vm i) = ‚ä•-elim (baseNotInert c i)

  canonical-bool : ‚àÄ{Œì}{M : Œì ‚ä¢ ` ùîπ} (v : Value M)
      ‚Üí (M ‚â° $_ true {P-Base}) ‚äé (M ‚â° $_ false {P-Base})
  canonical-bool (V-const {k = false}{f = P-Base}) = inj‚ÇÇ refl
  canonical-bool (V-const {k = true}{f = P-Base}) = inj‚ÇÅ refl
  canonical-bool (V-wrap {c = c} v i) = ‚ä•-elim (baseNotInert c i)

  canonical-pair : ‚àÄ{Œì}{A B}{M : Œì ‚ä¢ A `√ó B} (v : Value M) ‚Üí
      (Œ£[ M‚ÇÅ ‚àà Œì ‚ä¢ A ] Œ£[ M‚ÇÇ ‚àà Œì ‚ä¢ B ] M ‚â° cons M‚ÇÅ M‚ÇÇ √ó Value M‚ÇÅ √ó Value M‚ÇÇ)
      ‚äé
      (Œ£[ A' ‚àà Type ] Œ£[ M‚ÇÅ ‚àà Œì ‚ä¢ A' ] Œ£[ c ‚àà Cast (A' ‚áí A `√ó B) ] Œ£[ i ‚àà Inert c ]
          M ‚â° M‚ÇÅ ‚ü™ i ‚ü´ √ó Value M‚ÇÅ)
  canonical-pair (V-pair {V = V}{W} vm vm‚ÇÅ) =
      inj‚ÇÅ (‚ü® V , (‚ü® W , (‚ü® refl , (‚ü® vm , vm‚ÇÅ ‚ü©) ‚ü©) ‚ü©) ‚ü©)
  canonical-pair (V-wrap {A = A'}{V = V}{c = c} vm i) =
      inj‚ÇÇ (‚ü® A' , (‚ü® V , (‚ü® c , (‚ü® i , (‚ü® refl , vm ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©)

  canonical-sum : ‚àÄ{Œì}{A B}{M : Œì ‚ä¢ A `‚äé B} (v : Value M) ‚Üí
     (Œ£[ M‚ÇÅ ‚àà Œì ‚ä¢ A ] M ‚â° inl M‚ÇÅ)
     ‚äé (Œ£[ M‚ÇÅ ‚àà Œì ‚ä¢ B ] M ‚â° inr M‚ÇÅ)
     ‚äé (Œ£[ A' ‚àà Type ] Œ£[ M‚ÇÅ ‚àà Œì ‚ä¢ A' ] Œ£[ c ‚àà Cast (A' ‚áí A `‚äé B) ]
        Œ£[ i ‚àà Inert c ] M ‚â° M‚ÇÅ ‚ü™ i ‚ü´ √ó Value M‚ÇÅ)
  canonical-sum (V-inl {V = V} v) = inj‚ÇÅ (‚ü® V , refl ‚ü©)
  canonical-sum (V-inr {V = V} v) = inj‚ÇÇ (inj‚ÇÅ (‚ü® V , refl ‚ü©))
  canonical-sum (V-wrap {A = A}{V = V}{c} v i) =
      inj‚ÇÇ (inj‚ÇÇ (‚ü® A , (‚ü® V , (‚ü® c , (‚ü® i , (‚ü® refl , v ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©))

  hop : ‚àÄ{A} ‚Üí (M : ‚àÖ ‚ä¢ A) ‚Üí .(nv : ¬¨ Value M)  ‚Üí ‚àÖ ‚ä¢ A
  hop (∆õ M) nv = ‚ä•-elimi (nv V-∆õ)
  hop (L ¬∑ M) nv
      with value? L
  ... | yes vl
      with value? M
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = L ¬∑ (hop M nvm)
  hop (L ¬∑ M) nv | yes vl | yes vm
      with vl
  ... | (V-∆õ {N = N}) = N [ M ]
  ... | (V-wrap {V = V}{c} vv i)
      with Inert-Cross‚áí c i
  ... | (‚ü® x , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) =
      (V ¬∑ (M ‚ü® dom c x ‚ü©)) ‚ü® cod c x ‚ü©
  hop (L ¬∑ M) nv | yes vl | yes vm | (V-const {k = f}{f = (P-Fun b)})
      with canonical-base vm
  ... | ‚ü® k , ‚ü® p , refl ‚ü© ‚ü© = $_ (f k) {b}
  hop (L ¬∑ M) nv | no nvl
      with blame? L
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbl = (hop L nvl) ¬∑ M
  hop ($ x) nv = ‚ä•-elimi (nv V-const)
  hop (if L M N) nv
      with value? L
  ... | no nvl
      with blame? L
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbl = if (hop L nvl) M N
  hop (if L M N) nv | yes vl
      with canonical-bool vl
  ... | inj‚ÇÅ refl = M
  ... | inj‚ÇÇ refl = N
  hop (cons M N) nv
      with value? M
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = cons (hop M nvm) N
  hop (cons M N) nv | yes vm
      with value? N
  ... | no nvn
      with blame? N
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbn = cons M (hop N nvn)
  hop (cons M N) nv | yes vm | yes vn = ‚ä•-elimi (nv (V-pair vm vn))
  hop (fst M) nv
      with value? M
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = fst (hop M nvm)
  hop (fst M) nv | yes vm
      with canonical-pair vm
  ... | inj‚ÇÅ (‚ü® M‚ÇÅ , (‚ü® M‚ÇÇ , (‚ü® refl , (‚ü® vm1 , vm2 ‚ü©) ‚ü©) ‚ü©) ‚ü©) = M‚ÇÅ
  ... | inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c , (‚ü® i , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©)
      with Inert-Cross√ó c i
  ... | (‚ü® x , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = fst M‚ÇÅ ‚ü® fstC c x ‚ü© 
  hop (snd M) nv
      with value? M
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = snd (hop M nvm)
  hop (snd M) nv | yes vm
      with canonical-pair vm
  ... | inj‚ÇÅ (‚ü® M‚ÇÅ , (‚ü® M‚ÇÇ , (‚ü® refl , (‚ü® vm1 , vm2 ‚ü©) ‚ü©) ‚ü©) ‚ü©) = M‚ÇÇ
  ... | inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c , (‚ü® i , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©)
      with Inert-Cross√ó c i
  ... | (‚ü® x , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = snd M‚ÇÅ ‚ü® sndC c x ‚ü© 
  hop (inl M) nv
      with value? M
  ... | yes vm = ‚ä•-elimi (nv (V-inl vm))
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = inl (hop M nvm)
  hop (inr M) nv 
      with value? M
  ... | yes vm = ‚ä•-elimi (nv (V-inr vm))
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = inr (hop M nvm)
  hop (case L M N) nv
      with value? L
  ... | no nvl
      with blame? L
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbl = case (hop L nvl) M N
  hop (case L M N) nv | yes vl
      with canonical-sum vl
  ... | inj‚ÇÅ (‚ü® V , refl ‚ü©) = M [ V ]
  ... | inj‚ÇÇ (inj‚ÇÅ (‚ü® V , refl ‚ü©)) = N [ V ]
  ... | inj‚ÇÇ (inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c , (‚ü® i , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©))
      with Inert-Cross‚äé c i
  ... | (‚ü® x , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = 
        case M‚ÇÅ (rename (ext S_) M [ ` Z ‚ü® inlC c x ‚ü© ])
                (rename (ext S_) N [ ` Z ‚ü® inrC c x ‚ü© ]) 
  hop (M ‚ü® c ‚ü©) nv
      with value? M
  ... | no nvm 
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = (hop M nvm) ‚ü® c ‚ü©
  hop (M ‚ü® c ‚ü©) nv | yes vm
      with ActiveOrInert c
  ... | inj‚ÇÅ a = applyCast M vm c {a}
  ... | inj‚ÇÇ i = M ‚ü™ i ‚ü´
  hop (M ‚ü™ i ‚ü´) nv
      with value? M
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = blame ‚Ñì
  ... | no nbm = (hop M nvm) ‚ü™ i ‚ü´
  hop (M ‚ü™ i ‚ü´) nv | yes vm = M ‚ü™ i ‚ü´
  hop (blame ‚Ñì) nv = blame ‚Ñì

  reduce-not-value : ‚àÄ{Œì : Context}{A : Type}{M N : Œì ‚ä¢ A} ‚Üí M ‚Äî‚Üí N ‚Üí ¬¨ Value M
  reduce-not-value {M = M} M‚ÜíN 
      with value? M
  ... | yes mv = Œª x ‚Üí V‚åø‚Üí mv M‚ÜíN
  ... | no nmv = nmv

  prim-irrelevant : ‚àÄ{A : Type} (p1 : Prim A) (p2 : Prim A) ‚Üí p1 ‚â° p2
  prim-irrelevant {.(` _)} P-Base P-Base = refl
  prim-irrelevant {.(` _ ‚áí _)} (P-Fun p1) (P-Fun p2)
      with prim-irrelevant p1 p2
  ... | refl = refl

  value-irrelevant : ‚àÄ{Œì}{A}{V : Œì ‚ä¢ A} (v1 : Value V) (v2  : Value V) ‚Üí v1 ‚â° v2
  value-irrelevant V-∆õ V-∆õ = refl
  value-irrelevant V-const V-const = refl
  value-irrelevant (V-pair v1 v3) (V-pair v2 v4)
      with value-irrelevant v1 v2 | value-irrelevant v3 v4
  ... | refl | refl = refl
  value-irrelevant (V-inl v1) (V-inl v2)
      with value-irrelevant v1 v2
  ... | refl = refl
  value-irrelevant (V-inr v1) (V-inr v2)
      with value-irrelevant v1 v2
  ... | refl = refl
  value-irrelevant (V-wrap v1 i1) (V-wrap v2 i2)
      with value-irrelevant v1 v2
  ... | refl = refl

  reduce‚Üíhop : ‚àÄ{A} {M N : ‚àÖ ‚ä¢ A}  ‚Üí  (r : M ‚Äî‚Üí N)  ‚Üí  (nv : ¬¨ Value M)
      ‚Üí hop M nv ‚â° N
  reduce‚Üíhop (Œæ {M = M‚ÇÅ}{F = F-¬∑‚ÇÅ M‚ÇÇ} M‚ÜíN) nv
      with value? M‚ÇÅ
  ... | yes vm1 = ‚ä•-elim (reduce-not-value M‚ÜíN vm1)
  ... | no nvm1
      with blame? M‚ÇÅ
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN )
  ... | no nbm1
      with reduce‚Üíhop M‚ÜíN nvm1
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M‚ÇÇ}{F = F-¬∑‚ÇÇ M‚ÇÅ {vm1}} M‚ÜíN) nv
      with value? M‚ÇÅ
  ... | no nvm1 = ‚ä•-elim (nvm1 vm1)
  ... | yes _
      with value? M‚ÇÇ
  ... | yes vm2 = ‚ä•-elim (reduce-not-value M‚ÜíN vm2)
  ... | no nvm2
      with blame? M‚ÇÇ
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN )
  ... | no nbm2
      with reduce‚Üíhop M‚ÜíN nvm2
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = L}{F = F-if M N} L‚ÜíL') nv
      with value? L
  ... | yes vl = ‚ä•-elim (reduce-not-value L‚ÜíL' vl)
  reduce‚Üíhop (Œæ {M = L}{F = F-if M N} L‚ÜíL') nv | no nvl
      with blame? L
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí L‚ÜíL' )
  ... | no nbl
      with reduce‚Üíhop L‚ÜíL' nvl
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M‚ÇÇ}{F = F-√ó‚ÇÅ M‚ÇÅ vm1} M‚ÜíN) nv
      with value? M‚ÇÅ
  ... | no nvm = ‚ä•-elimi (nvm vm1)
  ... | yes vm
      with value? M‚ÇÇ
  ... | yes vn = ‚ä•-elim (reduce-not-value M‚ÜíN vn) 
  ... | no nvn
      with blame? M‚ÇÇ
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN )
  ... | no nbm2
      with reduce‚Üíhop M‚ÜíN nvn
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M‚ÇÅ}{F = F-√ó‚ÇÇ M‚ÇÇ} M‚ÜíN) nv
      with value? M‚ÇÅ
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm
      with blame? M‚ÇÅ
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm1
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-fst} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-snd} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-inl} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-inr} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = L}{F = F-case M N } L‚ÜíL') nv
      with value? L
  ... | yes vl = ‚ä•-elim (reduce-not-value L‚ÜíL' vl)
  ... | no nvl
      with blame? L
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí L‚ÜíL' )
  ... | no nbl
      with reduce‚Üíhop L‚ÜíL' nvl
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-cast c} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm  
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ {M = M}{F = F-wrap i} M‚ÜíN) nv
      with value? M
  ... | yes vm = ‚ä•-elim (reduce-not-value M‚ÜíN vm)
  ... | no nvm  
      with blame? M
  ... | yes (‚ü® ‚Ñì , refl ‚ü©) = ‚ä•-elim (blame‚åø‚Üí M‚ÜíN)
  ... | no nbm
      with reduce‚Üíhop M‚ÜíN nvm
  ... | refl = refl
  reduce‚Üíhop (Œæ-blame {F = F-¬∑‚ÇÅ x}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-¬∑‚ÇÇ M‚ÇÅ {v}}) nv
      with value? M‚ÇÅ
  ... | no nvm1 = ‚ä•-elim (nvm1 v)
  ... | yes vm1 = refl
  reduce‚Üíhop (Œæ-blame {F = F-if x x‚ÇÅ}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-√ó‚ÇÅ M‚ÇÅ vm1}) nv
      with value? M‚ÇÅ
  ... | no nvm1 = ‚ä•-elimi (nvm1 vm1)
  ... | yes _ = refl
  reduce‚Üíhop (Œæ-blame {F = F-√ó‚ÇÇ x}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-fst}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-snd}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-inl}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-inr}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-case x x‚ÇÅ}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-cast x}) nv = refl
  reduce‚Üíhop (Œæ-blame {F = F-wrap i}) nv = refl
  reduce‚Üíhop (Œ≤{W = W} vw) nv
      with value? W
  ... | no nvw = ‚ä•-elim (nvw vw)
  ... | yes _ = refl
  reduce‚Üíhop (Œ¥{f = f}{k}{P-Fun pb}{P-Base {Œπ}}{b}) nv
      with value? {Œì = ‚àÖ} ($_ k {P-Base {Œπ}})
  ... | no nvk
      with prim-irrelevant b pb
  ... | refl = refl
  reduce‚Üíhop (Œ¥{f = f}{k}{P-Fun pb}{P-Base {Œπ}}{b}) nv | yes vk
      with canonical-base vk
  ... | ‚ü® k , ‚ü® p , refl ‚ü© ‚ü©
      with prim-irrelevant b pb
  ... | refl = refl
  reduce‚Üíhop (Œ≤-if-true{f = f}) nv
      with canonical-bool {‚àÖ} (V-const{k = true}{f})
  ... | inj‚ÇÅ refl = refl
  ... | inj‚ÇÇ ()
  reduce‚Üíhop (Œ≤-if-false{f = f}) nv
      with canonical-bool {‚àÖ} (V-const{k = false}{f})
  ... | inj‚ÇÅ ()
  ... | inj‚ÇÇ refl = refl
  reduce‚Üíhop (Œ≤-fst{V = V}{W} vv vw) nv
      with value? V | value? W
  ... | no nvv | _ = ‚ä•-elim (nvv vv)
  ... | yes _ | no nvw = ‚ä•-elim (nvw vw)
  ... | yes _ | yes _ = refl
  reduce‚Üíhop (Œ≤-snd{V = V}{W} vv vw) nv
      with value? V | value? W
  ... | no nvv | _ = ‚ä•-elim (nvv vv)
  ... | yes _ | no nvw = ‚ä•-elim (nvw vw)
  ... | yes _ | yes _ = refl
  reduce‚Üíhop (Œ≤-caseL{V = V} vv) nv
      with value? V
  ... | no nvv = ‚ä•-elim (nvv vv)
  ... | yes _ = refl
  reduce‚Üíhop (Œ≤-caseR{V = V} vv) nv
      with value? V
  ... | no nvv = ‚ä•-elim (nvv vv)
  ... | yes _ = refl
  reduce‚Üíhop (cast{V = V}{c} vv {a}) nv
      with value? V
  ... | no nvv = ‚ä•-elim (nvv vv)
  ... | yes vv'
      with ActiveOrInert c
  ... | inj‚ÇÅ a'
      with value-irrelevant vv vv'
  ... | refl
      with ActiveNotRel a a'
  ... | refl = refl
  reduce‚Üíhop (cast{V = V}{c} vv {a}) nv | yes _ | inj‚ÇÇ i =
    ‚ä•-elim (ActiveNotInert a i)
  reduce‚Üíhop (wrap{V = V}{c} vv {i}) nv
      with value? V
  ... | no nvv = ‚ä•-elim (nvv vv)
  ... | yes vv'
      with ActiveOrInert c
  ... | inj‚ÇÅ a = ‚ä•-elim (ActiveNotInert a i)
  ... | inj‚ÇÇ i'
      with InertNotRel i i'
  ... | refl = refl
  reduce‚Üíhop (fun-cast{V = V}{W}{c} vv vw {x}{i}) nv
      with value? (V ‚ü™ i ‚ü´)
  ... | no nvv = ‚ä•-elim (nvv (V-wrap vv i))
  ... | yes vv'
      with value? W
  ... | no nvw = ‚ä•-elim (nvw vw)
  ... | yes _
      with vv'
  ... | (V-wrap vv'' i')
      with Inert-Cross‚áí c i'
  ... | (‚ü® x' , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) =
      refl
  reduce‚Üíhop (fst-cast {V = V}{c} vv {x}{i}) nv
      with value? (V ‚ü™ i ‚ü´)
  ... | no nvv = ‚ä•-elim (nvv (V-wrap vv i))
  ... | yes vv'
      with canonical-pair vv'
  ... | inj‚ÇÅ (‚ü® M‚ÇÅ , (‚ü® M‚ÇÇ , (‚ü® () , (‚ü® vm1 , vm2 ‚ü©) ‚ü©) ‚ü©) ‚ü©)
  reduce‚Üíhop (fst-cast {V = V}{c} vv {x}{i}) nv | yes vv'
      | inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c' , (‚ü® i' , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©)
      with Inert-Cross√ó c' i'
  ... | (‚ü® x' , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = refl
  reduce‚Üíhop (snd-cast {V = V}{c} vv {x}{i}) nv
      with value? (V ‚ü™ i ‚ü´)
  ... | no nvv = ‚ä•-elim (nvv (V-wrap vv i))
  ... | yes vv'
      with canonical-pair vv'
  ... | inj‚ÇÅ (‚ü® M‚ÇÅ , (‚ü® M‚ÇÇ , (‚ü® () , (‚ü® vm1 , vm2 ‚ü©) ‚ü©) ‚ü©) ‚ü©)
  ... | inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c' , (‚ü® i' , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©)
      with Inert-Cross√ó c' i'
  ... | (‚ü® x' , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = refl
  reduce‚Üíhop (case-cast {V = V}{M}{N}{c} vv {x}{i}) nv
      with value? (V ‚ü™ i ‚ü´)
  ... | no nvv = ‚ä•-elim (nvv (V-wrap vv i))
  ... | yes vv'
      with canonical-sum vv'
  ... | inj‚ÇÅ (‚ü® V' , () ‚ü©)
  ... | inj‚ÇÇ (inj‚ÇÅ (‚ü® V' , () ‚ü©))
  ... | inj‚ÇÇ (inj‚ÇÇ (‚ü® A' , (‚ü® M‚ÇÅ , (‚ü® c' , (‚ü® i' , (‚ü® refl , vm1 ‚ü©) ‚ü©) ‚ü©) ‚ü©) ‚ü©))
      with Inert-Cross‚äé c' i'
  ... | (‚ü® x' , (‚ü® A1 , (‚ü® A2 , refl ‚ü©) ‚ü©) ‚ü©) = 
        refl

  determinism : ‚àÄ{A : Type}{M N N' : ‚àÖ ‚ä¢ A}
              ‚Üí M ‚Äî‚Üí N  ‚Üí  M ‚Äî‚Üí N'
              ‚Üí N ‚â° N'
  determinism M‚ÜíN M‚ÜíN' =
      let h1 = reduce‚Üíhop M‚ÜíN (reduce-not-value M‚ÜíN) in
      let h2 = reduce‚Üíhop M‚ÜíN' (reduce-not-value M‚ÜíN') in
      trans (sym h1) h2
