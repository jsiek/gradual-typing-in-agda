open import Types
open import Variables
open import Labels
open import Data.Nat using (‚Ñï; zero; suc)

module GTLC2CCOrig
  (Cast : Type ‚Üí Set)
  (cast : (A : Type) ‚Üí (B : Type) ‚Üí Label ‚Üí {c : A ~ B } ‚Üí Cast (A ‚áí B))
  where

  open import GTLC
  open import ParamCastCalculusOrig Cast
  
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
     renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Maybe
  open import Relation.Binary.PropositionalEquality
     using (_‚â°_; refl; trans; sym; cong; cong-app)

  compile : ‚àÄ {Œì A} ‚Üí (Œì ‚ä¢G A) ‚Üí (Œì ‚ä¢ A)
  compile (` x) = ` x
  compile (∆õ A Àô M) = ∆õ (compile M)
  compile (_¬∑_at_ {Œì}{A}{A‚ÇÅ}{A‚ÇÇ}{B} L M ‚Ñì {m}{cn}) =
     let L' = (compile L) ‚ü® cast A (A‚ÇÅ ‚áí A‚ÇÇ) ‚Ñì {consis (‚ñπ‚áí‚äë m) Refl‚äë} ‚ü© in
     let M' = (compile M) ‚ü® cast B A‚ÇÅ ‚Ñì {Sym~ cn} ‚ü© in
     L' ¬∑ M'
  compile ($_ k {p}) = ($ k) {p}
  compile (if {Œì}{A}{A'}{B} L M N ‚Ñì {bb}{c}) =
     let L' = (compile L) ‚ü® cast B (` ùîπ) ‚Ñì {bb} ‚ü© in
     let M' = (compile M) ‚ü® cast A (‚®Ü c) ‚Ñì {~‚®Ü c} ‚ü© in
     let N' = (compile N) ‚ü® cast A' (‚®Ü c) ‚Ñì {‚®Ü~ c} ‚ü© in
     if L' M' N'
  compile (cons L M) =
     let L' = compile L in
     let M' = compile M in
     cons L' M'
  compile (fst {Œì}{A}{A‚ÇÅ}{A‚ÇÇ} M ‚Ñì {m}) =
     let M' = (compile M) ‚ü® cast A (A‚ÇÅ `√ó A‚ÇÇ) ‚Ñì {consis (‚ñπ√ó‚äë m) Refl‚äë} ‚ü© in
     fst M'
  compile (snd {Œì}{A}{A‚ÇÅ}{A‚ÇÇ} M ‚Ñì {m}) =
     let M' = (compile M) ‚ü® cast A (A‚ÇÅ `√ó A‚ÇÇ) ‚Ñì {consis (‚ñπ√ó‚äë m) Refl‚äë} ‚ü© in
     snd M'
  compile (inl B M) = inl (compile M)
  compile (inr A M) = inr (compile M)
  compile (case {Œì}{A}{A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ}{C‚ÇÅ}{C‚ÇÇ} L M N ‚Ñì
            {ma}{ab}{ac}{bc}) =
        let L' = (compile L) ‚ü® cast A (A‚ÇÅ `‚äé A‚ÇÇ) ‚Ñì {consis (‚ñπ‚äé‚äë ma) Refl‚äë} ‚ü©
                             ‚ü® cast (A‚ÇÅ `‚äé A‚ÇÇ) (B‚ÇÅ `‚äé C‚ÇÅ) ‚Ñì {sum~ ab ac} ‚ü© in
        let M' = (compile M) ‚ü® cast B‚ÇÇ (‚®Ü bc) ‚Ñì {~‚®Ü bc} ‚ü© in
        let N' = (compile N) ‚ü® cast C‚ÇÇ (‚®Ü bc) ‚Ñì {‚®Ü~ bc} ‚ü© in
          case L' (∆õ M') (∆õ N')
