open import Types
open import Variables
open import Labels
open import Data.Nat using (‚Ñï; zero; suc)

module GTLC2CCOrig
  (Cast : Type ‚Üí Set)
  (cast : (A : Type) ‚Üí (B : Type) ‚Üí Label ‚Üí {c : A ~ B } ‚Üí Cast (A ‚áí B))
  where

  open import GTLC
  open import ParamCastCalculusOrig Cast
  
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
     renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Maybe
  open import Relation.Binary.PropositionalEquality
     using (_‚â°_; refl; trans; sym; cong; cong-app)


  compile-var : ‚àÄ{Œì A}{x} ‚Üí Œì ‚àã x ‚¶Ç A ‚Üí Œì ‚àã A
  compile-var Z = Z
  compile-var (S ‚àãx) = let IH = compile-var ‚àãx in S IH

  compile : ‚àÄ {Œì A} (M : Term) ‚Üí (d : Œì ‚ä¢G M ‚¶Ç A) ‚Üí (Œì ‚ä¢ A)
  compile (` x) (‚ä¢var ‚àãx) = ` (compile-var ‚àãx)
  compile (∆õ A Àô N) (‚ä¢lam d) = ∆õ (compile N d)
  compile (L ¬∑ M at ‚Ñì) (‚ä¢app {A = A}{A‚ÇÅ}{A‚ÇÇ}{B} d‚ÇÅ d‚ÇÇ mA A1~B) =
     let L' = (compile L d‚ÇÅ) ‚ü® cast A (A‚ÇÅ ‚áí A‚ÇÇ) ‚Ñì {consis (‚ñπ‚áí‚äë mA) Refl‚äë} ‚ü© in
     let M' = (compile M d‚ÇÇ) ‚ü® cast B A‚ÇÅ ‚Ñì {Sym~ A1~B} ‚ü© in
     L' ¬∑ M'
  compile ($ k # p) ‚ä¢lit = $_ k {p}
  compile (if L then M else N at ‚Ñì) (‚ä¢if {A = A}{A'}{B} d‚ÇÅ d‚ÇÇ d‚ÇÉ B~Bool A~A') =
     let L' = (compile L d‚ÇÅ) ‚ü® cast B (` ùîπ) ‚Ñì {B~Bool} ‚ü© in
     let M' = (compile M d‚ÇÇ) ‚ü® cast A (‚®Ü A~A') ‚Ñì {~‚®Ü A~A'} ‚ü© in
     let N' = (compile N d‚ÇÉ) ‚ü® cast A' (‚®Ü A~A') ‚Ñì {‚®Ü~ A~A'} ‚ü© in
     if L' M' N'
  compile (‚ü¶ M , N ‚üß) (‚ä¢cons d‚ÇÅ d‚ÇÇ) = cons (compile M d‚ÇÅ) (compile N d‚ÇÇ)
  compile (fst M at ‚Ñì) (‚ä¢fst {A = A}{A‚ÇÅ}{A‚ÇÇ} d mA) =
      let c = cast A (A‚ÇÅ `√ó A‚ÇÇ) ‚Ñì {consis (‚ñπ√ó‚äë mA) Refl‚äë}  in
      let M' = (compile M d) ‚ü® c ‚ü© in
      fst M'
  compile (snd M at ‚Ñì) (‚ä¢snd {A = A}{A‚ÇÅ}{A‚ÇÇ} d mA) =
      let c = cast A (A‚ÇÅ `√ó A‚ÇÇ) ‚Ñì {consis (‚ñπ√ó‚äë mA) Refl‚äë}  in
      let M' = (compile M d) ‚ü® c ‚ü© in
      snd M'
  compile (inl M other B) (‚ä¢inl d) = inl (compile M d)
  compile (inr M other A) (‚ä¢inr d) = inr (compile M d)
  compile (case L of B‚ÇÅ ‚áí M ‚à£ C‚ÇÅ ‚áí N at ‚Ñì)
          (‚ä¢case {A = A}{B‚ÇÅ}{B‚ÇÇ}{C‚ÇÅ}{C‚ÇÇ} d‚ÇÅ d‚ÇÇ d‚ÇÉ A~B1C1 B2~C2) =
      let L' = (compile L d‚ÇÅ) ‚ü® cast A (B‚ÇÅ `‚äé C‚ÇÅ) ‚Ñì {A~B1C1} ‚ü© in
      let M' = (compile M d‚ÇÇ) ‚ü® cast B‚ÇÇ (‚®Ü B2~C2) ‚Ñì {~‚®Ü B2~C2} ‚ü© in
      let N' = (compile N d‚ÇÉ) ‚ü® cast C‚ÇÇ (‚®Ü B2~C2) ‚Ñì {‚®Ü~ B2~C2} ‚ü© in
      case L' (∆õ M') (∆õ N')
