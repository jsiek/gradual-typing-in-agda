{-# OPTIONS --allow-unsolved-metas #-}

module Denot.ConsisRegularInj where

open import Data.Empty using (‚ä•-elim; ‚ä•)
open import Data.List using (List ; _‚à∑_ ; []; _++_; length)
open import Data.List.Membership.Propositional renaming (_‚àà_ to _‚ãµ_)
open import Data.List.Relation.Unary.Any using (Any; here; there; any?)
open import Data.List.Relation.Unary.All using (All; []; _‚à∑_; lookup)
open import Data.Product using (_√ó_; _,_; Œ£; Œ£-syntax; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (Bool; true; false)
open import Labels
open import PrimitiveTypes using (Base)
open import Relation.Binary.PropositionalEquality
    using (_‚â°_; _‚â¢_; refl; sym; trans; subst)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Product using (_√ó-dec_)
open import Relation.Nullary.Implication using (_‚Üí-dec_)
open import SetsAsPredicates
open import Types
open import Denot.ValueInj

infix 5 _‚àº_
infix 5 _‚àº‚Çä_

_‚àº_ : (u : Val) ‚Üí (v : Val) ‚Üí Set
_‚àº‚Çä_ : (u : Val) ‚Üí (V : List Val) ‚Üí Set
_‚âà‚Çä_ : (U : List Val) ‚Üí (V : List Val) ‚Üí Set
inj A u ‚àº inj A' v = u ‚àº v 
inj A u ‚àº v = ‚ä•
const {Œπ} k ‚àº const {Œπ'} k' = Œ£[ Œπ‚â° ‚àà Œπ ‚â° Œπ' ] subst base-rep Œπ‚â° k ‚â° k'
const k ‚àº v = ‚ä•
(V ‚Ü¶ w) ‚àº ŒΩ = ‚ä§
(V ‚Ü¶ w) ‚àº V' ‚Ü¶ w' = V ‚âà‚Çä V' √ó w ‚àº w' ‚äé ¬¨ (V ‚âà‚Çä V')
(V ‚Ü¶ w) ‚àº v = ‚ä•
ŒΩ ‚àº ŒΩ = ‚ä§
ŒΩ ‚àº (V' ‚Ü¶ w') = ‚ä§
ŒΩ ‚àº v = ‚ä•
fst u ‚àº fst v = u ‚àº v
fst u ‚àº snd v = ‚ä§
fst u ‚àº v = ‚ä•
snd u ‚àº snd v = u ‚àº v
snd u ‚àº fst v = ‚ä§
snd u ‚àº v = ‚ä•
inl U ‚àº inl V = U ‚âà‚Çä V
inl U ‚àº v = ‚ä•
inr U ‚àº inr V = U ‚âà‚Çä V
inr U ‚àº v = ‚ä•
blame ‚Ñì ‚àº blame ‚Ñì' = ‚Ñì ‚â° ‚Ñì'
blame ‚Ñì ‚àº v = ‚ä•
u ‚àº‚Çä [] = ‚ä§
u ‚àº‚Çä (v ‚à∑ V) = u ‚àº v √ó u ‚àº‚Çä V
U ‚âà‚Çä V = All (_‚àº‚Çä V) U



scD : ùí´ Val ‚Üí Set
scD D = ‚àÄ u v ‚Üí u ‚àà D ‚Üí v ‚àà D ‚Üí u ‚àº v


‚àº-Type : ‚àÄ {u v A} ‚Üí ‚ü¶ u ‚à∂ A ‚üß ‚Üí u ‚àº v ‚Üí ‚ü¶ v ‚à∂ A ‚üß
‚àº-Type‚Çä : ‚àÄ {U V A} ‚Üí ‚ü¶ U ‚à∂ A ‚üß‚Çä ‚Üí U ‚âà‚Çä V ‚Üí ‚ü¶ V ‚à∂ A ‚üß‚Çä
‚àº-Type {inj A‚ÇÅ u} {inj A v} {‚ãÜ} u‚à∂A u~v = tt
‚àº-Type {const {B} k} {const {B‚ÇÅ} k‚ÇÅ} {` x} u‚à∂A (B‚â° , k‚â°) with base-eq? x B‚ÇÅ
... | yes refl = tt
... | no neq with base-eq? x B
... | yes refl = ‚ä•-elim (neq B‚â°)
... | no neq' = ‚ä•-elim u‚à∂A
‚àº-Type {V ‚Ü¶ u} {V‚ÇÅ ‚Ü¶ v} {A ‚áí A‚ÇÅ} u‚à∂A (inj‚ÇÅ (V~ , v~)) V‚ÇÅ‚à∂A = ‚àº-Type (u‚à∂A (‚àº-Type‚Çä V‚ÇÅ‚à∂A {! V~  !})) v~
‚àº-Type {V ‚Ü¶ u} {V‚ÇÅ ‚Ü¶ v} {A ‚áí A‚ÇÅ} u‚à∂A (inj‚ÇÇ ¬¨V~) V‚ÇÅ‚à∂A = {!  !}
‚àº-Type {V ‚Ü¶ u} {ŒΩ} {A ‚áí A‚ÇÅ} u‚à∂A u~v = tt
‚àº-Type {ŒΩ} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type {fst u} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type {snd u} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type {inl V} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type {inr V} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type {blame ‚Ñì} {v} {A} u‚à∂A u~v = {!   !}
‚àº-Type‚Çä {U}{V} U‚à∂A U‚âàV = {!   !}

data ‚àº-Class : Set where
  [bl_] : (‚Ñì : Label) ‚Üí ‚àº-Class
  [const_] : ‚àÄ {Œπ} (k : base-rep Œπ) ‚Üí ‚àº-Class
  [_√ó_] : ([A] : ‚àº-Class) ‚Üí ([B] : ‚àº-Class) ‚Üí ‚àº-Class
  [_‚äé_] : ([A] : ‚àº-Class) ‚Üí ([B] : ‚àº-Class) ‚Üí ‚àº-Class
  [_‚áí_] : ([A] : ‚àº-Class) ‚Üí ([B] : ‚àº-Class) ‚Üí ‚àº-Class

_[‚àº]_ : (u : Val) ‚Üí ([v] : ‚àº-Class) ‚Üí Set
(blame ‚Ñì) [‚àº] [bl ‚Ñì' ] = ‚Ñì ‚â° ‚Ñì'
u [‚àº] [bl ‚Ñì' ] = ‚ä•
u [‚àº] [const_] {Œπ'} k' = {!   !}
u [‚àº] [ [v] √ó [v]‚ÇÅ ] = {!   !}
u [‚àº] [ [v] ‚äé [v]‚ÇÅ ] = {!   !}
u [‚àº] [ [v] ‚áí [v]‚ÇÅ ] = {!   !}

