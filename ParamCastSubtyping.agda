open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Bool
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ)
  renaming (subst to subst-eq; subst‚ÇÇ to subst‚ÇÇ-eq)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Nat.Properties using (_‚âü_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Maybe


open import Types
open import Variables
open import Labels
open import PreCastStructure
open import CastStructure



-- Module definition - parameterized by `CastStruct` .
module ParamCastSubtyping (cs : CastStruct) where

open CastStruct cs

import ParamCastCalculus
open ParamCastCalculus Cast

import ParamCastAux
open ParamCastAux precast

import ParamCastReduction
open ParamCastReduction cs



-- Data type `CastsRespect<:` says all casts in M with blame label ‚Ñì respect subtyping.
data CastsRespect<: : ‚àÄ {Œì A} ‚Üí (M : Œì ‚ä¢ A) ‚Üí (‚Ñì : Label) ‚Üí Set where

  -- {- NOTE:
  --   If the cast has the same blame label as ‚Ñì , which is what the data type is quantified over,
  --   we require that the source & target types respect subtyping <: .
  -- -}
  CR<:-cast-same-‚Ñì : ‚àÄ {Œì S T} {M : Œì ‚ä¢ S} {c : Cast (S ‚áí T)} {‚Ñì}
    ‚Üí Safe c
    ‚Üí labC c ‚â° just ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------------------
    ‚Üí CastsRespect<: (M ‚ü® c ‚ü©) ‚Ñì

  -- {- NOTE:
  --   If the blame label ‚Ñì‚Ä≤ on the cast is different from what the data type is quantified over,
  --   this is fine and we don't impose any restriction on this cast.
  -- -}
  CR<:-cast-diff-‚Ñì : ‚àÄ {Œì S T} {M : Œì ‚ä¢ S} {c : Cast (S ‚áí T)} {‚Ñì}
    ‚Üí labC c ‚â¢ just ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
      ----------------------------------------------
    ‚Üí CastsRespect<: (M ‚ü® c ‚ü©) ‚Ñì

  CR<:-var : ‚àÄ {Œì A} {x : Œì ‚àã A} {‚Ñì}
      ------------------------------
    ‚Üí CastsRespect<: (` x) ‚Ñì

  CR<:-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: N ‚Ñì
      -----------------------
    ‚Üí CastsRespect<: (∆õ N) ‚Ñì

  CR<:-¬∑ : ‚àÄ {Œì A B} {L : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (L ¬∑ M) ‚Ñì

  CR<:-prim : ‚àÄ {Œì A} {p : rep A} {f : Prim A} {‚Ñì}
      --------------------------------------------
    ‚Üí CastsRespect<: ($_ {Œì} p {f}) ‚Ñì

  CR<:-if : ‚àÄ {Œì A} {L : Œì ‚ä¢ ` ùîπ} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      -----------------------------
    ‚Üí CastsRespect<: (if L M N) ‚Ñì

  CR<:-cons : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      ----------------------------
    ‚Üí CastsRespect<: (cons M N) ‚Ñì

  CR<:-fst : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `√ó B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (fst M) ‚Ñì

  CR<:-snd : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `√ó B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (snd M) ‚Ñì

  CR<:-inl : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      ---------------------------------
    ‚Üí CastsRespect<: (inl {B = B} M) ‚Ñì

  CR<:-inr : ‚àÄ {Œì A B} {N : Œì ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: N ‚Ñì
      ----------------------------------
    ‚Üí CastsRespect<: (inr {A = A} N) ‚Ñì

  CR<:-case : ‚àÄ {Œì A B C} {L : Œì ‚ä¢ A `‚äé B} {M : Œì ‚ä¢ A ‚áí C} {N : Œì ‚ä¢ B ‚áí C} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      ------------------------------
    ‚Üí CastsRespect<: (case L M N) ‚Ñì

  {- NOTE:
    A well-typed surface language term can never be compiled into a blame in the cast calculus (CC).
    However we still have a case for `blame ‚Ñì` here since it has such a case in CC.
  -}
  CR<:-blame-diff-‚Ñì : ‚àÄ {Œì A} {‚Ñì ‚Ñì‚Ä≤}
    ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
      ------------------------------------
    ‚Üí CastsRespect<: (blame {Œì} {A} ‚Ñì‚Ä≤) ‚Ñì


plug-blame-CR<:-inv : ‚àÄ {Œì A B} {F : Frame {Œì = Œì} A B} {‚Ñì ‚Ñì‚Ä≤}
  ‚Üí CastsRespect<: (plug (blame ‚Ñì‚Ä≤) F) ‚Ñì
    -------------------------------------
  ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-¬∑‚ÇÅ _} (CR<:-¬∑ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-¬∑‚ÇÇ _} (CR<:-¬∑ _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-if _ _} (CR<:-if (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _ _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-√ó‚ÇÅ _} (CR<:-cons _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-√ó‚ÇÇ _} (CR<:-cons (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-fst} (CR<:-fst (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-snd} (CR<:-snd (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-inl} (CR<:-inl (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-inr} (CR<:-inr (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-case _ _} (CR<:-case (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _ _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-cast _} (CR<:-cast-same-‚Ñì _ _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-cast _} (CR<:-cast-diff-‚Ñì _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤

preserve-CR<:-plug : ‚àÄ {Œì A B} {M M‚Ä≤ : Œì ‚ä¢ A} {F : Frame A B} {‚Ñì}
  ‚Üí CastsRespect<: (plug M F) ‚Ñì
  ‚Üí M ‚Äî‚Üí M‚Ä≤
    -----------------------------
  ‚Üí CastsRespect<: (plug M‚Ä≤ F) ‚Ñì

preserve-CR<: : ‚àÄ {Œì A} {M M‚Ä≤ : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí M ‚Äî‚Üí M‚Ä≤
      --------------------
    ‚Üí CastsRespect<: M‚Ä≤ ‚Ñì

preserve-CR<:-plug {M = L} {L‚Ä≤} {F = F-¬∑‚ÇÅ M} (CR<:-¬∑ resp-L resp-M) rd = CR<:-¬∑ (preserve-CR<: resp-L rd) resp-M
preserve-CR<:-plug {F = F-¬∑‚ÇÇ L {v}} (CR<:-¬∑ resp-L resp-M) rd = CR<:-¬∑ resp-L (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-if M N} (CR<:-if resp-L resp-M resp-N) rd = CR<:-if (preserve-CR<: resp-L rd ) resp-M resp-N
preserve-CR<:-plug {F = F-√ó‚ÇÅ M} (CR<:-cons resp-M resp-N) rd = CR<:-cons resp-M (preserve-CR<: resp-N rd)
preserve-CR<:-plug {F = F-√ó‚ÇÇ N} (CR<:-cons resp-M resp-N) rd = CR<:-cons (preserve-CR<: resp-M rd) resp-N
preserve-CR<:-plug {F = F-fst} (CR<:-fst resp-M) rd = CR<:-fst (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-snd} (CR<:-snd resp-M) rd = CR<:-snd (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-inl} (CR<:-inl resp-M) rd = CR<:-inl (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-inr} (CR<:-inr resp-M) rd = CR<:-inr (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-case M N} (CR<:-case resp-L resp-M resp-N) rd = CR<:-case (preserve-CR<: resp-L rd) resp-M resp-N
preserve-CR<:-plug {F = F-cast c} (CR<:-cast-same-‚Ñì safe eq resp-M) rd = CR<:-cast-same-‚Ñì safe eq (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-cast c} (CR<:-cast-diff-‚Ñì neq resp-M) rd = CR<:-cast-diff-‚Ñì neq (preserve-CR<: resp-M rd)

preserve-CR<: resp (Œæ rd) = preserve-CR<:-plug resp rd
preserve-CR<: resp Œæ-blame = CR<:-blame-diff-‚Ñì (plug-blame-CR<:-inv resp)
-- Need to prove substitution preserves `CR<:` .
preserve-CR<: (CR<:-¬∑ (CR<:-∆õ resp-N) resp-W) (Œ≤ v) = {!!}
preserve-CR<: resp Œ¥ = CR<:-prim
preserve-CR<: (CR<:-if _ resp-M _) Œ≤-if-true = resp-M
preserve-CR<: (CR<:-if _ _ resp-M‚Ä≤) Œ≤-if-false = resp-M‚Ä≤
preserve-CR<: (CR<:-fst (CR<:-cons resp-M _)) (Œ≤-fst _ _) = resp-M
preserve-CR<: (CR<:-snd (CR<:-cons _ resp-N)) (Œ≤-snd _ _) = resp-N
preserve-CR<: (CR<:-case (CR<:-inl resp) resp-M _) (Œ≤-caseL x) = CR<:-¬∑ resp-M resp
preserve-CR<: (CR<:-case (CR<:-inr resp) _ resp-N) (Œ≤-caseR x) = CR<:-¬∑ resp-N resp
preserve-CR<: (CR<:-cast-same-‚Ñì safe eq resp) (cast v {a}) = {!!}
preserve-CR<: (CR<:-cast-diff-‚Ñì neq resp) (cast v {a}) = {!!}
-- CR<: (V ¬∑ (W ‚ü® dom c x ‚ü©)) ‚ü® cod c x ‚ü©
preserve-CR<: (CR<:-¬∑ (CR<:-cast-same-‚Ñì safe eq resp-V) resp-W) (fun-cast {c = c} vV vW {x}) =
  -- Here we expect a proof that `labC c ‚â° labC (dom c x)` , where `c` is a function cast.
  let dom-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (domLabEq c x) eq in
  let cod-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (codLabEq c x) eq in
    CR<:-cast-same-‚Ñì (codSafe safe x) cod-eq (CR<:-¬∑ resp-V (CR<:-cast-same-‚Ñì (domSafe safe x) dom-eq resp-W))
preserve-CR<: (CR<:-¬∑ (CR<:-cast-diff-‚Ñì neq resp-V) resp-W) (fun-cast {c = c} vV vW {x}) =
  let dom-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (domLabEq c x) neq in
  let cod-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (codLabEq c x) neq in
    CR<:-cast-diff-‚Ñì cod-neq (CR<:-¬∑ resp-V (CR<:-cast-diff-‚Ñì dom-neq resp-W))
preserve-CR<: (CR<:-fst (CR<:-cast-same-‚Ñì safe eq resp-V)) (fst-cast {c = c} vV {x}) =
  let fst-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (fstLabEq c x) eq in
    CR<:-cast-same-‚Ñì (fstSafe safe x) fst-eq (CR<:-fst resp-V)
preserve-CR<: (CR<:-fst (CR<:-cast-diff-‚Ñì neq resp-V)) (fst-cast {c = c} vV {x}) =
  let fst-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (fstLabEq c x) neq in
    CR<:-cast-diff-‚Ñì fst-neq (CR<:-fst resp-V)
preserve-CR<: (CR<:-snd (CR<:-cast-same-‚Ñì safe eq resp-V)) (snd-cast {c = c} vV {x}) =
  let snd-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (sndLabEq c x) eq in
    CR<:-cast-same-‚Ñì (sndSafe safe x) snd-eq (CR<:-snd resp-V)
preserve-CR<: (CR<:-snd (CR<:-cast-diff-‚Ñì neq resp-V)) (snd-cast {c = c} vV {x}) =
  let snd-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (sndLabEq c x) neq in
    CR<:-cast-diff-‚Ñì snd-neq (CR<:-snd resp-V)
preserve-CR<: (CR<:-case (CR<:-cast-same-‚Ñì safe eq resp-V) resp-W‚ÇÅ resp-W‚ÇÇ) (case-cast {c = c} vV {x}) =
  let inl-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (inlLabEq c x) eq in
  let inr-eq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â° just _) (inrLabEq c x) eq in
    CR<:-case resp-V (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-same-‚Ñì (inlSafe safe x) inl-eq CR<:-var)))
                     (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-same-‚Ñì (inrSafe safe x) inr-eq CR<:-var)))
preserve-CR<: (CR<:-case (CR<:-cast-diff-‚Ñì neq resp-V) resp-W‚ÇÅ resp-W‚ÇÇ) (case-cast {c = c} vV {x}) =
  let inl-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (inlLabEq c x) neq in
  let inr-neq = subst-eq (Œª ‚ñ° ‚Üí ‚ñ° ‚â¢ just _) (inrLabEq c x) neq in
    CR<:-case resp-V (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-diff-‚Ñì inl-neq CR<:-var)))
                     (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-diff-‚Ñì inr-neq CR<:-var)))

