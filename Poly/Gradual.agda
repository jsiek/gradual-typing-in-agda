{-# OPTIONS --rewriting #-}
{-

  This gradual version of System F is similar to System F_G of
  Igarashi, Sekiyama, and Igarashi (ICFP 2017).

  todo: list the subtle differences
  * no monomorphic restriction on all~any, any~all, and any‚äëall

-}

open import Agda.Primitive using (lzero)
open import Data.List using (List; []; _‚à∑_; length)
open import Data.Nat
open import Data.Nat.Induction
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List using (map)
open import Data.Nat.Properties
open import Data.Product using (_,_;_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; ‚àÉ-syntax)
open import Data.Unit.Polymorphic using (‚ä§; tt)
open import Data.Vec using (Vec) renaming ([] to []Ãå; _‚à∑_ to _‚à∑Ãå_)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Induction using (RecStruct)
open import Induction.WellFounded as WF
open import Data.Product.Relation.Binary.Lex.Strict
  using (√ó-Lex; √ó-wellFounded; √ó-preorder)
open import Relation.Binary using (Rel)
open import Relation.Binary.PropositionalEquality as Eq
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ; subst; trans)
open Eq.‚â°-Reasoning
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Sig renaming (ŒΩ to nu)
open import Var using (Var)

module Poly.Gradual where

open import Poly.Types

{-------------      Terms    -------------}

data Op : Set where
  op-nat : ‚Ñï ‚Üí Op
  op-lam : Op
  op-app : Op
  op-tyabs : Op
  op-tyapp : Op

sig : Op ‚Üí List Sig
sig (op-nat n) = []
sig op-lam = (nu ‚ñ†) ‚à∑ []
sig op-app = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig op-tyabs = (nu ‚ñ†) ‚à∑ []
sig op-tyapp = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []

open import rewriting.AbstractBindingTree Op sig renaming (ABT to Term) public

pattern $ n = (op-nat n) ‚¶Ö nil ‚¶Ü
pattern ∆õ N  = op-lam ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
infixl 7  _¬∑_
pattern _¬∑_ L M = op-app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern Œõ N  = op-tyabs ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
infix 5 _„Äê_„Äë
pattern _„Äê_„Äë L Œ± = op-tyapp ‚¶Ö cons (ast L) (cons (ast Œ±) nil) ‚¶Ü
