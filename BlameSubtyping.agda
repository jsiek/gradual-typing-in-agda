open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Bool
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Nat.Properties using (_‚âü_)

-- We're using simple cast - at least for now.
open import SimpleCast using (Cast; pcs; cs)
open import Types
open import Variables
open import Labels

import ParamCastCalculus
open ParamCastCalculus Cast
import ParamCastAux
open ParamCastAux pcs using (Value; Frame; plug)
import ParamCastReduction
open ParamCastReduction cs
open import CastSubtyping using (CastsRespect<:)
open CastsRespect<:

-- Test
-- M : ‚àÖ ‚ä¢ ‚ãÜ
-- M = ($_ zero {Prim.P-Base}) ‚ü® _‚áí‚ü®_‚ü©_ (` Nat) (Label.pos zero) ‚ãÜ {unk~R} ‚ü©


open _‚Äî‚Üí_
open _‚Äî‚Ü†_
open Value

-- Values do not reduce.
postulate
  V‚åø‚Üí : ‚àÄ {Œì A} {M N : Œì ‚ä¢ A}
    ‚Üí Value M
    ‚Üí ¬¨ (M ‚Äî‚Üí N)

{-
  If every cast in the term M respects subtyping, then M ‚åø‚Ü† blame ùìÅ for any ùìÅ .
-}
soundness-<: : ‚àÄ {Œì A} {M : Œì ‚ä¢ A}
  ‚Üí CastsRespect<: M
  ‚Üí ¬¨ (‚àÉ[ ùìÅ ] (M ‚Äî‚Ü† blame ùìÅ))
soundness-<: resp ‚ü® ùìÅ , .(plug _ _) ‚Äî‚Üí‚ü® Œæ rd ‚ü© rdd ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(plug (blame _) _) ‚Äî‚Üí‚ü® Œæ-blame ‚ü© rdd ‚ü© = {!!}
soundness-<: {M = (∆õ N) ¬∑ W} (CastsRespect<:-¬∑ resp-∆õN resp-W) ‚ü® ùìÅ , .((∆õ N) ¬∑ W) ‚Äî‚Üí‚ü® Œ≤ vW ‚ü© N[W]‚Ü†blame ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(($ _) ¬∑ ($ _)) ‚Äî‚Üí‚ü® Œ¥ ‚ü© rdd ‚ü© = {!!}
soundness-<: {M = if ($ true) M N} (CastsRespect<:-if _ resp-M _) ‚ü® ùìÅ , .(if ($ true) M N) ‚Äî‚Üí‚ü® Œ≤-if-true ‚ü© M‚Ü†blame ‚ü© =
  soundness-<: resp-M (‚ü® ùìÅ , M‚Ü†blame ‚ü©)
soundness-<: {M = if ($ false) M N} (CastsRespect<:-if _ _ resp-N) ‚ü® ùìÅ , .(if ($ false) M N) ‚Äî‚Üí‚ü® Œ≤-if-false ‚ü© N‚Ü†blame ‚ü© =
  soundness-<: resp-N (‚ü® ùìÅ , N‚Ü†blame ‚ü©)
soundness-<: {M = fst (cons V W)} (CastsRespect<:-fst (CastsRespect<:-cons resp-V resp-W)) ‚ü® ùìÅ , .(fst (cons V W)) ‚Äî‚Üí‚ü® Œ≤-fst vV vW ‚ü© V‚Ü†blame ‚ü© =
  -- Another way to do this is to prove that V cannot step to blame.
  soundness-<: resp-V (‚ü® ùìÅ , V‚Ü†blame ‚ü©)
soundness-<: {M = snd (cons V W)} (CastsRespect<:-snd (CastsRespect<:-cons resp-V resp-W)) ‚ü® ùìÅ , .(snd (cons V W)) ‚Äî‚Üí‚ü® Œ≤-snd vV vW ‚ü© W‚Ü†blame ‚ü© =
  soundness-<: resp-W (‚ü® ùìÅ , W‚Ü†blame ‚ü©)
soundness-<: {M = case (inl V) L M} (CastsRespect<:-case (CastsRespect<:-inl resp-V) resp-L _) ‚ü® ùìÅ , .(case (inl V) L M) ‚Äî‚Üí‚ü® Œ≤-caseL vV ‚ü© L¬∑V‚Ü†blame ‚ü© =
  soundness-<: (CastsRespect<:-¬∑ resp-L resp-V) (‚ü® ùìÅ , L¬∑V‚Ü†blame ‚ü©)
soundness-<: {M = case (inr V) L M} (CastsRespect<:-case (CastsRespect<:-inr resp-V) _ resp-M) ‚ü® ùìÅ , .(case (inr V) L M) ‚Äî‚Üí‚ü® Œ≤-caseR vV ‚ü© M¬∑V‚Ü†blame ‚ü© =
  soundness-<: (CastsRespect<:-¬∑ resp-M resp-V) (‚ü® ùìÅ , M¬∑V‚Ü†blame ‚ü©)
soundness-<: resp ‚ü® ùìÅ , .(_ ‚ü® _ ‚ü©) ‚Äî‚Üí‚ü® cast v ‚ü© rdd ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(_ ‚ü® _ ‚ü© ¬∑ _) ‚Äî‚Üí‚ü® fun-cast v x ‚ü© rdd ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(fst (_ ‚ü® _ ‚ü©)) ‚Äî‚Üí‚ü® fst-cast x ‚ü© rdd ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(snd (_ ‚ü® _ ‚ü©)) ‚Äî‚Üí‚ü® snd-cast x ‚ü© rdd ‚ü© = {!!}
soundness-<: resp ‚ü® ùìÅ , .(case (_ ‚ü® _ ‚ü©) _ _) ‚Äî‚Üí‚ü® case-cast x ‚ü© rdd ‚ü© = {!!}
