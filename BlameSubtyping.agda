open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Bool
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Nat.Properties using (_‚âü_)

-- We're using simple cast - at least for now.
open import SimpleCast using (Cast; Active; applyCast; pcs; cs)
open import Types
open import Variables
open import Labels

import ParamCastCalculus
open ParamCastCalculus Cast
import ParamCastAux
open ParamCastAux pcs using (Value; Frame; plug)
import ParamCastReduction
open ParamCastReduction cs
open import CastSubtyping using (CastsRespect<:; _<:_)



-- Test
-- M : ‚àÖ ‚ä¢ ‚ãÜ
-- M = ($_ zero {Prim.P-Base}) ‚ü® _‚áí‚ü®_‚ü©_ (` Nat) (Label.pos zero) ‚ãÜ {unk~R} ‚ü©


open _‚Äî‚Üí_
open _‚Äî‚Ü†_
open Value

-- Values do not reduce.
postulate
  V‚åø‚Üí : ‚àÄ {Œì A} {M N : Œì ‚ä¢ A}
    ‚Üí Value M
    ‚Üí ¬¨ (M ‚Äî‚Üí N)

open CastsRespect<:
open Frame
open _<:_

-- There is no way to plug a blame in a frame and produce a term where every cast respects <: .
plug-blame‚Üí¬¨respect<: : ‚àÄ {Œì A B ùìÅ}
  ‚Üí (F : Frame {Œì} A B)
  ‚Üí ¬¨ (CastsRespect<: (plug (blame ùìÅ) F))
plug-blame‚Üí¬¨respect<: (F-¬∑‚ÇÅ M) (CastsRespect<:-¬∑ () _)                   -- ‚ñ° ¬∑ M
plug-blame‚Üí¬¨respect<: (F-¬∑‚ÇÇ L) (CastsRespect<:-¬∑ _ ())                   -- L ¬∑ ‚ñ°
plug-blame‚Üí¬¨respect<: (F-if M N) (CastsRespect<:-if () _ _)              -- if ‚ñ° M N
plug-blame‚Üí¬¨respect<: (F-√ó‚ÇÅ M) (CastsRespect<:-cons _ ())                -- cons M ‚ñ°
plug-blame‚Üí¬¨respect<: (F-√ó‚ÇÇ L) (CastsRespect<:-cons () _)                -- cons ‚ñ° L
plug-blame‚Üí¬¨respect<: F-fst (CastsRespect<:-fst ())                      -- fst ‚ñ°
plug-blame‚Üí¬¨respect<: F-snd (CastsRespect<:-snd ())                      -- snd ‚ñ°
plug-blame‚Üí¬¨respect<: F-inl (CastsRespect<:-inl ())                      -- inl ‚ñ°
plug-blame‚Üí¬¨respect<: F-inr (CastsRespect<:-inr ())                      -- inr ‚ñ°
plug-blame‚Üí¬¨respect<: (F-case M N) (CastsRespect<:-case () _ _)          -- case ‚ñ° M N
plug-blame‚Üí¬¨respect<: (F-cast c) (CastsRespect<:-cast _ ())              -- ‚ñ° ‚ü® c ‚ü©

data NotBlame : ‚àÄ {Œì A} ‚Üí Œì ‚ä¢ A ‚Üí Set where

  `-not-blame : ‚àÄ {Œì A} {M : Œì ‚ä¢ A}
    ‚Üí ‚àÉ[ x ] (M ‚â° ` x)
    ‚Üí NotBlame M

  ∆õ-not-blame : ‚àÄ {Œì B A} {M : Œì ‚ä¢ A ‚áí B}
    ‚Üí ‚àÉ[ N ] (M ‚â° ∆õ N)
    ‚Üí NotBlame M

  ¬∑-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ B}
    ‚Üí Œ£[ L ‚àà Œì ‚ä¢ A ‚áí B ] ‚àÉ[ N ] (M ‚â° L ¬∑ N)
    ‚Üí NotBlame M

  $-not-blame : ‚àÄ {Œì A} {p : rep A} {f : Prim A} {M : Œì ‚ä¢ A}
    ‚Üí ‚àÉ[ p ] (M ‚â° $_ {Œì} p {f})
    ‚Üí NotBlame M

  if-not-blame : ‚àÄ {Œì A} {M : Œì ‚ä¢ A}
    ‚Üí ‚àÉ[ L ] ‚àÉ[ N‚ÇÅ ] ‚àÉ[ N‚ÇÇ ] (M ‚â° if L N‚ÇÅ N‚ÇÇ)
    ‚Üí NotBlame M

  cons-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `√ó B}
    ‚Üí ‚àÉ[ L ] ‚àÉ[ N ] (M ‚â° cons L N)
    ‚Üí NotBlame M

  fst-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A}
    ‚Üí Œ£[ N ‚àà Œì ‚ä¢ A `√ó B ] (M ‚â° fst N)
    ‚Üí NotBlame M

  snd-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ B}
    ‚Üí Œ£[ N ‚àà Œì ‚ä¢ A `√ó B ] (M ‚â° snd N)
    ‚Üí NotBlame M

  inl-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `‚äé B}
    ‚Üí ‚àÉ[ N ] (M ‚â° inl N)
    ‚Üí NotBlame M

  inr-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `‚äé B}
    ‚Üí ‚àÉ[ N ] (M ‚â° inr N)
    ‚Üí NotBlame M

  case-not-blame : ‚àÄ {Œì A B C} {M : Œì ‚ä¢ C}
    ‚Üí Œ£[ L ‚àà Œì ‚ä¢ A `‚äé B ] ‚àÉ[ N‚ÇÅ ] ‚àÉ[ N‚ÇÇ ] (M ‚â° case L N‚ÇÅ N‚ÇÇ)
    ‚Üí NotBlame M

  cast-not-blame : ‚àÄ {Œì A B} {M : Œì ‚ä¢ B}
    ‚Üí Œ£[ N ‚àà Œì ‚ä¢ A ] ‚àÉ[ c ] (M ‚â° N ‚ü® c ‚ü©)
    ‚Üí NotBlame M

<:-safe-cast : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A} {c : Cast (A ‚áí B)}
  ‚Üí (a : Active c)
  ‚Üí (vV : Value V)
  ‚Üí A <: B
  ‚Üí NotBlame (applyCast V vV c {a})

{- TODO:
  We need to prove preservation w.r.t `CastsRespect<:` .
-}

{-
  If every cast in the term M respects subtyping, then M ‚åø‚Ü† blame ùìÅ for any ùìÅ .
-}
soundness-<: : ‚àÄ {Œì A} {M : Œì ‚ä¢ A}
  ‚Üí CastsRespect<: M
  ‚Üí ¬¨ (‚àÉ[ ùìÅ ] (M ‚Äî‚Ü† blame ùìÅ))
-- By induction on M ‚Äî‚Ü† blame ùìÅ .
soundness-<: resp-plugMF ‚ü® ùìÅ , .(plug _ _) ‚Äî‚Üí‚ü® Œæ M‚ÜíM‚Ä≤ ‚ü© plugM‚Ä≤F‚Ü†blame ‚ü© =
  -- In this case we need to prove that reduction preserves `CastsRespect<:` .
  soundness-<: {!!} (‚ü® ùìÅ , plugM‚Ä≤F‚Ü†blame ‚ü©)

-- There is no way to plug a blame in a frame and produce a term where every cast respects <: .
soundness-<: resp ‚ü® ùìÅ , .(plug (blame _) _) ‚Äî‚Üí‚ü® Œæ-blame {F = F} ‚ü© _ ‚ü© = plug-blame‚Üí¬¨respect<: F resp

soundness-<: {M = (∆õ N) ¬∑ W} (CastsRespect<:-¬∑ resp-∆õN resp-W) ‚ü® ùìÅ , .((∆õ N) ¬∑ W) ‚Äî‚Üí‚ü® Œ≤ vW ‚ü© N[W]‚Ü†blame ‚ü© =
  {-
    We need to prove that given Œì , A ‚ä¢ N ‚¶Ç B and Œì ‚ä¢ W ‚¶Ç A that both satisfy `CastsRespect<:`,
    the substituted term N [ W ] also satisfies `CastsRespect<:` - single substitution preserves `CastsRespect<:` .
  -}
  soundness-<: {!!} (‚ü® ùìÅ , N[W]‚Ü†blame ‚ü©)

soundness-<: {M = ($ f) ¬∑ ($ k)} -- This case corresponds to the Œ¥ rule.
  (CastsRespect<:-¬∑ resp-f resp-k)
  ‚ü® ùìÅ , .(($ _) ¬∑ ($ _)) ‚Äî‚Üí‚ü® Œ¥ ‚ü© fk‚Ü†blame ‚ü© =
    soundness-<: CastsRespect<:-prim (‚ü® ùìÅ , fk‚Ü†blame ‚ü©)

soundness-<: {M = if ($ true) M N}
  (CastsRespect<:-if _ resp-M _)
  ‚ü® ùìÅ , .(if ($ true) M N) ‚Äî‚Üí‚ü® Œ≤-if-true ‚ü© M‚Ü†blame ‚ü© =
    soundness-<: resp-M (‚ü® ùìÅ , M‚Ü†blame ‚ü©)

soundness-<: {M = if ($ false) M N}
  (CastsRespect<:-if _ _ resp-N)
  ‚ü® ùìÅ , .(if ($ false) M N) ‚Äî‚Üí‚ü® Œ≤-if-false ‚ü© N‚Ü†blame ‚ü© =
    soundness-<: resp-N (‚ü® ùìÅ , N‚Ü†blame ‚ü©)

soundness-<: {M = fst (cons V W)}
  (CastsRespect<:-fst (CastsRespect<:-cons resp-V resp-W))
  ‚ü® ùìÅ , .(fst (cons V W)) ‚Äî‚Üí‚ü® Œ≤-fst vV vW ‚ü© V‚Ü†blame ‚ü© =
    -- Another way to do this is to prove that V cannot step to blame.
    soundness-<: resp-V (‚ü® ùìÅ , V‚Ü†blame ‚ü©)

soundness-<: {M = snd (cons V W)}
  (CastsRespect<:-snd (CastsRespect<:-cons resp-V resp-W))
  ‚ü® ùìÅ , .(snd (cons V W)) ‚Äî‚Üí‚ü® Œ≤-snd vV vW ‚ü© W‚Ü†blame ‚ü© =
    soundness-<: resp-W (‚ü® ùìÅ , W‚Ü†blame ‚ü©)

soundness-<: {M = case (inl V) L M}
  (CastsRespect<:-case (CastsRespect<:-inl resp-V) resp-L _)
  ‚ü® ùìÅ , .(case (inl V) L M) ‚Äî‚Üí‚ü® Œ≤-caseL vV ‚ü© L¬∑V‚Ü†blame ‚ü© =
    soundness-<: (CastsRespect<:-¬∑ resp-L resp-V) (‚ü® ùìÅ , L¬∑V‚Ü†blame ‚ü©)

soundness-<: {M = case (inr V) L M}
  (CastsRespect<:-case (CastsRespect<:-inr resp-V) _ resp-M)
  ‚ü® ùìÅ , .(case (inr V) L M) ‚Äî‚Üí‚ü® Œ≤-caseR vV ‚ü© M¬∑V‚Ü†blame ‚ü© =
    soundness-<: (CastsRespect<:-¬∑ resp-M resp-V) (‚ü® ùìÅ , M¬∑V‚Ü†blame ‚ü©)

{- NOTE:
  We need to prove two things here:
    1. Reduction `‚Äî‚Üí` preserves `CastsRespect<:`
    2. `applyCast` preserves `CastsRespect<:`
-}
soundness-<: {M = V ‚ü® c ‚ü©}
  (CastsRespect<:-cast {S = S} {T} S<:T resp-V)
  ‚ü® ùìÅ , .(_ ‚ü® _ ‚ü©) ‚Äî‚Üí‚ü® cast vV {a} ‚ü© applyCastVc‚Ü†blame ‚ü© = ?
--   with <:-safe-cast a vV S<:T
-- soundness-<: {M = V ‚ü® c ‚ü©} (CastsRespect<:-cast {S = S} {T} S<:T resp-V) ‚ü® ùìÅ , .(_ ‚ü® _ ‚ü©) ‚Äî‚Üí‚ü® cast vV {a} ‚ü© applyCastVc‚Ü†blame ‚ü© | `-not-blame (‚ü® x , eq ‚ü©) rewrite eq with applyCastVc‚Ü†blame
-- ...   | ` x ‚Äî‚Üí‚ü® `x‚ÜíM ‚ü© M‚Ü†blame = soundness-<: {!!} (‚ü® ùìÅ , M‚Ü†blame ‚ü©)
-- soundness-<: {M = V ‚ü® c ‚ü©} (CastsRespect<:-cast {S = S} {T} S<:T resp-V) ‚ü® ùìÅ , .(_ ‚ü® _ ‚ü©) ‚Äî‚Üí‚ü® cast vV {a} ‚ü© applyCastVc‚Ü†blame ‚ü© | ∆õ-not-blame (‚ü® N , eq ‚ü©) rewrite eq with applyCastVc‚Ü†blame
-- ...   | ∆õ N ‚Äî‚Üí‚ü® ∆õN‚ÜíM ‚ü© M‚Ü†blame = soundness-<: {!!} (‚ü® ùìÅ , M‚Ü†blame ‚ü©)

soundness-<: {M = (_‚ü®_‚ü© {A = S‚ÇÅ ‚áí S‚ÇÇ} {B = T‚ÇÅ ‚áí T‚ÇÇ} V c) ¬∑ W}
  (CastsRespect<:-¬∑ (CastsRespect<:-cast (<:-‚áí T‚ÇÅ<:S‚ÇÅ S‚ÇÇ<:T‚ÇÇ) resp-V) resp-W)
  ‚ü® ùìÅ , .(V ‚ü® c ‚ü© ¬∑ W) ‚Äî‚Üí‚ü® fun-cast vV vW ‚ü© V¬∑W‚Ü†blame ‚ü© =
  soundness-<: (CastsRespect<:-cast S‚ÇÇ<:T‚ÇÇ
                                    (CastsRespect<:-¬∑ resp-V (CastsRespect<:-cast T‚ÇÅ<:S‚ÇÅ resp-W)))
               (‚ü® ùìÅ , V¬∑W‚Ü†blame ‚ü©)

soundness-<: {M = fst (_‚ü®_‚ü© {A = A‚ÇÅ `√ó A‚ÇÇ} {B = B‚ÇÅ `√ó B‚ÇÇ} V c)}
  (CastsRespect<:-fst (CastsRespect<:-cast (<:-√ó A‚ÇÅ<:B‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V))
  ‚ü® ùìÅ , .(fst (V ‚ü® c ‚ü©)) ‚Äî‚Üí‚ü® fst-cast _ ‚ü© fstV‚ü®fstc‚ü©‚Ü†blame ‚ü© =
    soundness-<: (CastsRespect<:-cast A‚ÇÅ<:B‚ÇÅ (CastsRespect<:-fst resp-V)) (‚ü® ùìÅ , fstV‚ü®fstc‚ü©‚Ü†blame ‚ü©)

soundness-<: {M = snd (_‚ü®_‚ü© {A = A‚ÇÅ `√ó A‚ÇÇ} {B = B‚ÇÅ `√ó B‚ÇÇ} V c)}
  (CastsRespect<:-snd (CastsRespect<:-cast (<:-√ó A‚ÇÅ<:B‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V))
  ‚ü® ùìÅ , .(snd (V ‚ü® c ‚ü©)) ‚Äî‚Üí‚ü® snd-cast _ ‚ü© sndV‚ü®sndc‚ü©‚Ü†blame ‚ü© =
    soundness-<: (CastsRespect<:-cast A‚ÇÇ<:B‚ÇÇ (CastsRespect<:-snd resp-V)) (‚ü® ùìÅ , sndV‚ü®sndc‚ü©‚Ü†blame ‚ü©)

soundness-<: {M = case (_‚ü®_‚ü© {A = A‚ÇÅ `‚äé A‚ÇÇ} {B = B‚ÇÅ `‚äé B‚ÇÇ} V c) W‚ÇÅ W‚ÇÇ}
  (CastsRespect<:-case (CastsRespect<:-cast (<:-‚äé A‚ÇÅ<:B‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V) resp-W‚ÇÅ resp-W‚ÇÇ)
  ‚ü® ùìÅ , .(case (V ‚ü® c ‚ü©) W‚ÇÅ W‚ÇÇ) ‚Äî‚Üí‚ü® case-cast vV ‚ü© ‚Ü†blame ‚ü© =
    soundness-<: (CastsRespect<:-case resp-V
                                      (CastsRespect<:-∆õ (CastsRespect<:-¬∑ {!!} (CastsRespect<:-cast A‚ÇÅ<:B‚ÇÅ CastsRespect<:-var)))
                                      (CastsRespect<:-∆õ (CastsRespect<:-¬∑ {!!} (CastsRespect<:-cast A‚ÇÇ<:B‚ÇÇ CastsRespect<:-var))))
                 (‚ü® ùìÅ , ‚Ü†blame ‚ü©)
