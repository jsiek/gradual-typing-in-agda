module CastSubtyping where



open import Data.Nat using (‚Ñï; zero; suc)
open import Data.Bool
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; inspect; [_])
  renaming (subst to subst-eq; subst‚ÇÇ to subst‚ÇÇ-eq)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax; ‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Nat.Properties using (_‚âü_)
open import Data.Empty using (‚ä•; ‚ä•-elim)

open import SimpleCast using (Cast; Active; Cross; applyCast; pcs; cs; dom; cod; fstC; sndC; inlC; inrC)
open import Types
open import Variables
open import Labels

import ParamCastCalculus
open ParamCastCalculus Cast
import ParamCastAux
open ParamCastAux pcs using (Value; Frame; plug; canonical‚ãÜ)
import ParamCastReduction
open ParamCastReduction cs


open Active
open Cast
open Frame


-- The subtyping relation.
--   NOTE: Since simple cast is D, using traditional subtyping is fine.
infix 5 _<:_

data _<:_ : Type ‚Üí Type ‚Üí Set where

  T<:‚ãÜ : ‚àÄ {T} ‚Üí T <: ‚ãÜ

  <:-B : ‚àÄ {B} ‚Üí ` B <: ` B

  -- Product and sum are monotone with respect to subtyping.
  <:-√ó : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
    ‚Üí S‚ÇÅ <: T‚ÇÅ ‚Üí S‚ÇÇ <: T‚ÇÇ
      ---------------------
    ‚Üí S‚ÇÅ `√ó S‚ÇÇ <: T‚ÇÅ `√ó T‚ÇÇ

  <:-‚äé : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
    ‚Üí S‚ÇÅ <: T‚ÇÅ ‚Üí S‚ÇÇ <: T‚ÇÇ
      ---------------------
    ‚Üí S‚ÇÅ `‚äé S‚ÇÇ <: T‚ÇÅ `‚äé T‚ÇÇ

  <:-‚áí : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
    ‚Üí T‚ÇÅ <: S‚ÇÅ ‚Üí S‚ÇÇ <: T‚ÇÇ
      ---------------------
    ‚Üí S‚ÇÅ ‚áí S‚ÇÇ <: T‚ÇÅ ‚áí T‚ÇÇ


-- A few lemmas about `<:` :
‚ãÜ<:T‚ÜíT‚â°‚ãÜ : ‚àÄ {T} ‚Üí ‚ãÜ <: T ‚Üí T ‚â° ‚ãÜ
‚ãÜ<:T‚ÜíT‚â°‚ãÜ T<:‚ãÜ = refl

-- Subtyping `<:` implies consistency.
<:‚Üí~ : ‚àÄ {S T} ‚Üí S <: T ‚Üí S ~ T
<:‚Üí~ T<:‚ãÜ = unk~R
<:‚Üí~ <:-B = base~
<:‚Üí~ (<:-√ó sub‚ÇÅ sub‚ÇÇ) = pair~ (<:‚Üí~ sub‚ÇÅ) (<:‚Üí~ sub‚ÇÇ)
<:‚Üí~ (<:-‚äé sub‚ÇÅ sub‚ÇÇ) = sum~ (<:‚Üí~ sub‚ÇÅ) (<:‚Üí~ sub‚ÇÇ)
<:‚Üí~ (<:-‚áí sub‚ÇÅ sub‚ÇÇ) = fun~ (<:‚Üí~ sub‚ÇÅ) (<:‚Üí~ sub‚ÇÇ)

-- The inductively defined datatype `HasCast` talks about what it means for a cast `c` to appear in a term `M` .
data HasCast : ‚àÄ {Œì A S T} ‚Üí (M : Œì ‚ä¢ A) ‚Üí (c : Cast (S ‚áí T)) ‚Üí Set where

  -- Base
  HasCast-cast : ‚àÄ {Œì S T} {M : Œì ‚ä¢ S} {c : Cast (S ‚áí T)}
    ‚Üí HasCast (M ‚ü® c ‚ü©) c

  -- Ind
  HasCast-cast·µ¢ : ‚àÄ {Œì S S‚Ä≤ T T‚Ä≤} {M : Œì ‚ä¢ S‚Ä≤} {c : Cast (S ‚áí T)} {c‚Ä≤ : Cast (S‚Ä≤ ‚áí T‚Ä≤)}
    ‚Üí HasCast M c
    ‚Üí HasCast (M ‚ü® c‚Ä≤ ‚ü©) c

  HasCast-∆õ : ‚àÄ {Œì A B S T} {N : Œì , A ‚ä¢ B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast N c
    ‚Üí HasCast (∆õ N) c

  HasCast-¬∑‚Çó : ‚àÄ {Œì A B S T} {L : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast L c
    ‚Üí HasCast (L ¬∑ M) c

  HasCast-¬∑·µ£ : ‚àÄ {Œì A B S T} {L : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (L ¬∑ M) c

  HasCast-if‚Çó : ‚àÄ {Œì A S T} {L : Œì ‚ä¢ ` ùîπ} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast L c
    ‚Üí HasCast (if L M N) c

  HasCast-if‚Çò : ‚àÄ {Œì A S T} {L : Œì ‚ä¢ ` ùîπ} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (if L M N) c

  HasCast-if·µ£ : ‚àÄ {Œì A S T} {L : Œì ‚ä¢ ` ùîπ} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast N c
    ‚Üí HasCast (if L M N) c

  HasCast-cons‚Çó : ‚àÄ {Œì A B S T} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (cons M N) c

  HasCast-cons·µ£ : ‚àÄ {Œì A B S T} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast N c
    ‚Üí HasCast (cons M N) c

  HasCast-fst : ‚àÄ {Œì A B S T} {M : Œì ‚ä¢ A `√ó B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (fst M) c

  HasCast-snd : ‚àÄ {Œì A B S T} {M : Œì ‚ä¢ A `√ó B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (snd M) c

  HasCast-inl : ‚àÄ {Œì A B S T} {M : Œì ‚ä¢ A} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (inl {B = B} M) c

  HasCast-inr : ‚àÄ {Œì A B S T} {N : Œì ‚ä¢ B} {c : Cast (S ‚áí T)}
    ‚Üí HasCast N c
    ‚Üí HasCast (inr {A = A} N) c

  HasCast-case‚Çó : ‚àÄ {Œì A B C S T} {L : Œì ‚ä¢ A `‚äé B} {M : Œì ‚ä¢ A ‚áí C} {N : Œì ‚ä¢ B ‚áí C} {c : Cast (S ‚áí T)}
    ‚Üí HasCast L c
    ‚Üí HasCast (case L M N) c

  HasCast-case‚Çò : ‚àÄ {Œì A B C S T} {L : Œì ‚ä¢ A `‚äé B} {M : Œì ‚ä¢ A ‚áí C} {N : Œì ‚ä¢ B ‚áí C} {c : Cast (S ‚áí T)}
    ‚Üí HasCast M c
    ‚Üí HasCast (case L M N) c

  HasCast-case·µ£ : ‚àÄ {Œì A B C S T} {L : Œì ‚ä¢ A `‚äé B} {M : Œì ‚ä¢ A ‚áí C} {N : Œì ‚ä¢ B ‚áí C} {c : Cast (S ‚áí T)}
    ‚Üí HasCast N c
    ‚Üí HasCast (case L M N) c



-- Data type `CastsRespect<:` says all casts in M with blame label ‚Ñì respect subtyping.
data CastsRespect<: : ‚àÄ {Œì A} ‚Üí (M : Œì ‚ä¢ A) ‚Üí (‚Ñì : Label) ‚Üí Set where

  {- NOTE:
    If the cast has the same blame label as ‚Ñì , which is what the data type is quantified over,
    we require that the source & target types respect subtyping <: .
  -}
  CR<:-cast-same-‚Ñì : ‚àÄ {Œì S T} {S~T : S ~ T} {M : Œì ‚ä¢ S} {‚Ñì}
    ‚Üí (S<:T : S <: T)
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------------------
    ‚Üí CastsRespect<: (M ‚ü® (S ‚áí‚ü® ‚Ñì ‚ü© T) {S~T} ‚ü©) ‚Ñì

  {- NOTE:
    If the blame label ‚Ñì‚Ä≤ on the cast is different from what the data type is quantified over,
    this is fine and we don't impose any restriction on this cast.
  -}
  CR<:-cast-diff-‚Ñì : ‚àÄ {Œì S T} {S~T : S ~ T} {M : Œì ‚ä¢ S} {‚Ñì ‚Ñì‚Ä≤}
    ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
    ‚Üí CastsRespect<: M ‚Ñì
      ----------------------------------------------
    ‚Üí CastsRespect<: (M ‚ü® (S ‚áí‚ü® ‚Ñì‚Ä≤ ‚ü© T) {S~T} ‚ü©) ‚Ñì

  CR<:-var : ‚àÄ {Œì A} {x : Œì ‚àã A} {‚Ñì}
      ------------------------------
    ‚Üí CastsRespect<: (` x) ‚Ñì

  CR<:-∆õ : ‚àÄ {Œì A B} {N : Œì , A ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: N ‚Ñì
      -----------------------
    ‚Üí CastsRespect<: (∆õ N) ‚Ñì

  CR<:-¬∑ : ‚àÄ {Œì A B} {L : Œì ‚ä¢ A ‚áí B} {M : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (L ¬∑ M) ‚Ñì

  CR<:-prim : ‚àÄ {Œì A} {p : rep A} {f : Prim A} {‚Ñì}
      --------------------------------------------
    ‚Üí CastsRespect<: ($_ {Œì} p {f}) ‚Ñì

  CR<:-if : ‚àÄ {Œì A} {L : Œì ‚ä¢ ` ùîπ} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      -----------------------------
    ‚Üí CastsRespect<: (if L M N) ‚Ñì

  CR<:-cons : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A} {N : Œì ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      ----------------------------
    ‚Üí CastsRespect<: (cons M N) ‚Ñì

  CR<:-fst : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `√ó B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (fst M) ‚Ñì

  CR<:-snd : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A `√ó B} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      -------------------------
    ‚Üí CastsRespect<: (snd M) ‚Ñì

  CR<:-inl : ‚àÄ {Œì A B} {M : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
      ---------------------------------
    ‚Üí CastsRespect<: (inl {B = B} M) ‚Ñì

  CR<:-inr : ‚àÄ {Œì A B} {N : Œì ‚ä¢ B} {‚Ñì}
    ‚Üí CastsRespect<: N ‚Ñì
      ----------------------------------
    ‚Üí CastsRespect<: (inr {A = A} N) ‚Ñì

  CR<:-case : ‚àÄ {Œì A B C} {L : Œì ‚ä¢ A `‚äé B} {M : Œì ‚ä¢ A ‚áí C} {N : Œì ‚ä¢ B ‚áí C} {‚Ñì}
    ‚Üí CastsRespect<: L ‚Ñì
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí CastsRespect<: N ‚Ñì
      ------------------------------
    ‚Üí CastsRespect<: (case L M N) ‚Ñì

  {- NOTE:
    A well-typed surface language term can never be compiled into a blame in the cast calculus (CC).
    However we still have a case for `blame ‚Ñì` here since it has such a case in CC.
  -}
  CR<:-blame-diff-‚Ñì : ‚àÄ {Œì A} {‚Ñì ‚Ñì‚Ä≤}
    ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
      ------------------------------------
    ‚Üí CastsRespect<: (blame {Œì} {A} ‚Ñì‚Ä≤) ‚Ñì


fun~-dom : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
  ‚Üí (S~T : (S‚ÇÅ ‚áí S‚ÇÇ) ~ (T‚ÇÅ ‚áí T‚ÇÇ))
  ‚Üí T‚ÇÅ ~ S‚ÇÅ
fun~-dom S~T with ~-relevant S~T
... | fun~ T‚ÇÅ~S‚ÇÅ _ = T‚ÇÅ~S‚ÇÅ

fun~-cod : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ}
  ‚Üí (S~T : (S‚ÇÅ ‚áí S‚ÇÇ) ~ (T‚ÇÅ ‚áí T‚ÇÇ))
  ‚Üí S‚ÇÇ ~ T‚ÇÇ
fun~-cod S~T with ~-relevant S~T
... | fun~ _ S‚ÇÇ~T‚ÇÇ = S‚ÇÇ~T‚ÇÇ

dom-eq : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ} {‚Ñì}
  ‚Üí (S~T : (S‚ÇÅ ‚áí S‚ÇÇ) ~ (T‚ÇÅ ‚áí T‚ÇÇ))
  ‚Üí (x : Cross ((S‚ÇÅ ‚áí S‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (T‚ÇÅ ‚áí T‚ÇÇ)))
  ‚Üí (dom (((S‚ÇÅ ‚áí S‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (T‚ÇÅ ‚áí T‚ÇÇ)) {S~T}) x) ‚â° ((T‚ÇÅ ‚áí‚ü® ‚Ñì ‚ü© S‚ÇÅ) {fun~-dom S~T})
dom-eq S~T x with ~-relevant S~T
... | fun~ _ _ = refl

cod-eq : ‚àÄ {S‚ÇÅ S‚ÇÇ T‚ÇÅ T‚ÇÇ} {‚Ñì}
  ‚Üí (S~T : (S‚ÇÅ ‚áí S‚ÇÇ) ~ (T‚ÇÅ ‚áí T‚ÇÇ))
  ‚Üí (x : Cross ((S‚ÇÅ ‚áí S‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (T‚ÇÅ ‚áí T‚ÇÇ)))
  ‚Üí (cod (((S‚ÇÅ ‚áí S‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (T‚ÇÅ ‚áí T‚ÇÇ)) {S~T}) x) ‚â° ((S‚ÇÇ ‚áí‚ü® ‚Ñì ‚ü© T‚ÇÇ) {fun~-cod S~T})
cod-eq S~T x with ~-relevant S~T
... | fun~ _ _ = refl

pair~-fst : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
  ‚Üí (A~B : (A‚ÇÅ `√ó A‚ÇÇ) ~ (B‚ÇÅ `√ó B‚ÇÇ))
  ‚Üí A‚ÇÅ ~ B‚ÇÅ
pair~-fst A~B with ~-relevant A~B
... | pair~ A‚ÇÅ~B‚ÇÅ _ = A‚ÇÅ~B‚ÇÅ

pair~-snd : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
  ‚Üí (A~B : (A‚ÇÅ `√ó A‚ÇÇ) ~ (B‚ÇÅ `√ó B‚ÇÇ))
  ‚Üí A‚ÇÇ ~ B‚ÇÇ
pair~-snd A~B with ~-relevant A~B
... | pair~ _ A‚ÇÇ~B‚ÇÇ = A‚ÇÇ~B‚ÇÇ

fstC-eq : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} {‚Ñì}
  ‚Üí (A~B : (A‚ÇÅ `√ó A‚ÇÇ) ~ (B‚ÇÅ `√ó B‚ÇÇ))
  ‚Üí (x : Cross ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ)))
    -----------------------------------------------
  ‚Üí (fstC (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ)) {A~B}) x) ‚â° ((A‚ÇÅ ‚áí‚ü® ‚Ñì ‚ü© B‚ÇÅ) {pair~-fst A~B}) -- here we use a helper to destruct A~B
fstC-eq A~B x with ~-relevant A~B
... | pair~ _ _ = refl

sndC-eq : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} {‚Ñì}
  ‚Üí (A~B : (A‚ÇÅ `√ó A‚ÇÇ) ~ (B‚ÇÅ `√ó B‚ÇÇ))
  ‚Üí (x : Cross ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ)))
    ------------------------------------------------
  ‚Üí (sndC (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ)) {A~B}) x) ‚â° ((A‚ÇÇ ‚áí‚ü® ‚Ñì ‚ü© B‚ÇÇ) {pair~-snd A~B})
sndC-eq A~B x with ~-relevant A~B
... | pair~ _ _ = refl

sum~-inl : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
  ‚Üí (A~B : (A‚ÇÅ `‚äé A‚ÇÇ) ~ (B‚ÇÅ `‚äé B‚ÇÇ))
  ‚Üí A‚ÇÅ ~ B‚ÇÅ
sum~-inl A~B with ~-relevant A~B
... | sum~ A‚ÇÅ~B‚ÇÅ _ = A‚ÇÅ~B‚ÇÅ

sum~-inr : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
  ‚Üí (A~B : (A‚ÇÅ `‚äé A‚ÇÇ) ~ (B‚ÇÅ `‚äé B‚ÇÇ))
  ‚Üí A‚ÇÇ ~ B‚ÇÇ
sum~-inr A~B with ~-relevant A~B
... | sum~ _ A‚ÇÇ~B‚ÇÇ = A‚ÇÇ~B‚ÇÇ

inlC-eq : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} {‚Ñì}
  ‚Üí (A~B : (A‚ÇÅ `‚äé A‚ÇÇ) ~ (B‚ÇÅ `‚äé B‚ÇÇ))
  ‚Üí (x : Cross ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ)))
    -----------------------------------------------
  ‚Üí (inlC (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ)) {A~B}) x) ‚â° ((A‚ÇÅ ‚áí‚ü® ‚Ñì ‚ü© B‚ÇÅ) {sum~-inl A~B})
inlC-eq A~B x with ~-relevant A~B
... | sum~ _ _ = refl

inrC-eq : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} {‚Ñì}
  ‚Üí (A~B : (A‚ÇÅ `‚äé A‚ÇÇ) ~ (B‚ÇÅ `‚äé B‚ÇÇ))
  ‚Üí (x : Cross ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ)))
    -----------------------------------------------
  ‚Üí (inrC (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ)) {A~B}) x) ‚â° ((A‚ÇÇ ‚áí‚ü® ‚Ñì ‚ü© B‚ÇÇ) {sum~-inr A~B})
inrC-eq A~B x with ~-relevant A~B
... | sum~ _ _ = refl

{- Applying (an active) cast on a value preserves CastsRespect<: . -}
-- If the cast has the same blame label with the one that CR<: is quantified with :
applyCast-same-‚Ñì-pres-CR<: : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A} {vV : Value V} {‚Ñì}
    ‚Üí (A~B : A ~ B)
    ‚Üí (a : Active ((A ‚áí‚ü® ‚Ñì ‚ü© B) {A~B})) -- Since the cast can apply, it need to active.
    ‚Üí A <: B         -- We require A <: B since the label on the cast is the same as the one CR<: is quantified with.
    ‚Üí (resp-V : CastsRespect<: V ‚Ñì)
      -----------------------------------------------------
    ‚Üí CastsRespect<: (applyCast V vV (A ‚áí‚ü® ‚Ñì ‚ü© B) {a}) ‚Ñì
applyCast-same-‚Ñì-pres-CR<: _ (activeId (A ‚áí‚ü® ‚Ñì ‚ü© A)) A<:B resp-V = resp-V
-- For simple cast, the key observation here is that B must be ‚ãÜ .
applyCast-same-‚Ñì-pres-CR<: {V = V} {vV} A~B (activeProj (‚ãÜ ‚áí‚ü® ‚Ñì ‚ü© B) x) T<:‚ãÜ resp-V
  with canonical‚ãÜ V vV
... | ‚ü® A‚Ä≤ , ‚ü® M‚Ä≤ , ‚ü® _ , ‚ü® _ , meq ‚ü© ‚ü© ‚ü© ‚ü© rewrite meq with A‚Ä≤ `~ B
...   | no _ = CR<:-blame-diff-‚Ñì (Œª _ ‚Üí x refl)
...   | yes _ with resp-V
...     | CR<:-cast-same-‚Ñì _ resp-M‚Ä≤ = CR<:-cast-same-‚Ñì T<:‚ãÜ resp-M‚Ä≤
...     | CR<:-cast-diff-‚Ñì _ resp-M‚Ä≤ = CR<:-cast-same-‚Ñì T<:‚ãÜ resp-M‚Ä≤
applyCast-same-‚Ñì-pres-CR<: A~B (activeFun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) (<:-‚áí B‚ÇÅ<:A‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V
  rewrite dom-eq A~B (Cross.C-fun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) | cod-eq A~B (Cross.C-fun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) =
    -- We need to prove renaming preserves CR<: .
    CR<:-∆õ (CR<:-cast-same-‚Ñì A‚ÇÇ<:B‚ÇÇ (CR<:-¬∑ {!!} (CR<:-cast-same-‚Ñì B‚ÇÅ<:A‚ÇÅ CR<:-var)))
applyCast-same-‚Ñì-pres-CR<: A~B (activePair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) (<:-√ó A‚ÇÅ<:B‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V
  rewrite fstC-eq A~B (Cross.C-pair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) | sndC-eq A~B (Cross.C-pair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) =
  -- Prove CastsRespect<: (cons (fst V ‚ü® fstC c x ‚ü©) (snd V ‚ü® sndC c x ‚ü©)) ‚Ñì
    CR<:-cons (CR<:-cast-same-‚Ñì A‚ÇÅ<:B‚ÇÅ (CR<:-fst resp-V)) (CR<:-cast-same-‚Ñì A‚ÇÇ<:B‚ÇÇ (CR<:-snd resp-V))
applyCast-same-‚Ñì-pres-CR<: A~B (activeSum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) (<:-‚äé A‚ÇÅ<:B‚ÇÅ A‚ÇÇ<:B‚ÇÇ) resp-V
  rewrite inlC-eq A~B (Cross.C-sum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) | inrC-eq A~B (Cross.C-sum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) =
    CR<:-case resp-V (CR<:-∆õ (CR<:-inl (CR<:-cast-same-‚Ñì A‚ÇÅ<:B‚ÇÅ CR<:-var))) (CR<:-∆õ (CR<:-inr (CR<:-cast-same-‚Ñì A‚ÇÇ<:B‚ÇÇ CR<:-var)))

-- This handles the other case when the blame label on the cast is different from the one that CR<: is quantified with :
applyCast-diff-‚Ñì-pres-CR<: : ‚àÄ {Œì A B} {V : Œì ‚ä¢ A} {vV : Value V} {‚Ñì ‚Ñì‚Ä≤}
    ‚Üí (A~B : A ~ B)
    ‚Üí (a : Active ((A ‚áí‚ü® ‚Ñì‚Ä≤ ‚ü© B) {A~B})) -- Since the cast can apply, it need to active.
    ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
    ‚Üí (resp-V : CastsRespect<: V ‚Ñì)
      -----------------------------------------------------
    ‚Üí CastsRespect<: (applyCast V vV (A ‚áí‚ü® ‚Ñì‚Ä≤ ‚ü© B) {a}) ‚Ñì
applyCast-diff-‚Ñì-pres-CR<: _ (activeId (A ‚áí‚ü® ‚Ñì‚Ä≤ ‚ü© A)) ‚Ñì‚â¢‚Ñì‚Ä≤ resp-V = resp-V
applyCast-diff-‚Ñì-pres-CR<: {V = V} {vV} {‚Ñì} A~B (activeProj (‚ãÜ ‚áí‚ü® ‚Ñì‚Ä≤ ‚ü© B) x) ‚Ñì‚â¢‚Ñì‚Ä≤ resp-V
  with canonical‚ãÜ V vV
... | ‚ü® A‚Ä≤ , ‚ü® M‚Ä≤ , ‚ü® _ , ‚ü® _ , meq ‚ü© ‚ü© ‚ü© ‚ü© rewrite meq with A‚Ä≤ `~ B
...   | no _ = CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤
...   | yes _ with resp-V
...     | CR<:-cast-same-‚Ñì _ resp-M‚Ä≤ = CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ resp-M‚Ä≤
...     | CR<:-cast-diff-‚Ñì _ resp-M‚Ä≤ = CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ resp-M‚Ä≤
applyCast-diff-‚Ñì-pres-CR<: A~B (activeFun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) ‚Ñì‚â¢‚Ñì‚Ä≤ resp-V
  rewrite dom-eq A~B (Cross.C-fun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) | cod-eq A~B (Cross.C-fun ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ ‚áí B‚ÇÇ))) =
    -- We need to prove renaming preserves CR<: .
    CR<:-∆õ (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ (CR<:-¬∑ {!!} (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ CR<:-var)))
applyCast-diff-‚Ñì-pres-CR<: A~B (activePair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) ‚Ñì‚â¢‚Ñì‚Ä≤ resp-V
  rewrite fstC-eq A~B (Cross.C-pair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) | sndC-eq A~B (Cross.C-pair ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `√ó B‚ÇÇ))) =
  -- Prove CastsRespect<: (cons (fst V ‚ü® fstC c x ‚ü©) (snd V ‚ü® sndC c x ‚ü©)) ‚Ñì
    CR<:-cons (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ (CR<:-fst resp-V)) (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ (CR<:-snd resp-V))
applyCast-diff-‚Ñì-pres-CR<: A~B (activeSum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) ‚Ñì‚â¢‚Ñì‚Ä≤ resp-V
  rewrite inlC-eq A~B (Cross.C-sum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) | inrC-eq A~B (Cross.C-sum ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí‚ü® ‚Ñì ‚ü© (B‚ÇÅ `‚äé B‚ÇÇ))) =
    CR<:-case resp-V (CR<:-∆õ (CR<:-inl (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ CR<:-var))) (CR<:-∆õ (CR<:-inr (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤ CR<:-var)))



plug-blame-CR<:-inv : ‚àÄ {Œì A B} {F : Frame {Œì = Œì} A B} {‚Ñì ‚Ñì‚Ä≤}
  ‚Üí CastsRespect<: (plug (blame ‚Ñì‚Ä≤) F) ‚Ñì
    -------------------------------------
  ‚Üí ‚Ñì ‚â¢ ‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-¬∑‚ÇÅ _} (CR<:-¬∑ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-¬∑‚ÇÇ _} (CR<:-¬∑ _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-if _ _} (CR<:-if (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _ _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-√ó‚ÇÅ _} (CR<:-cons _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-√ó‚ÇÇ _} (CR<:-cons (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-fst} (CR<:-fst (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-snd} (CR<:-snd (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-inl} (CR<:-inl (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-inr} (CR<:-inr (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-case _ _} (CR<:-case (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤) _ _) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-cast .(_ ‚áí‚ü® _ ‚ü© _)} (CR<:-cast-same-‚Ñì _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤
plug-blame-CR<:-inv {F = F-cast .(_ ‚áí‚ü® _ ‚ü© _)} (CR<:-cast-diff-‚Ñì _ (CR<:-blame-diff-‚Ñì ‚Ñì‚â¢‚Ñì‚Ä≤)) ‚Ñì‚â°‚Ñì‚Ä≤ = ‚Ñì‚â¢‚Ñì‚Ä≤ ‚Ñì‚â°‚Ñì‚Ä≤

{-
  We need to prove preservation w.r.t `CastsRespect<:` .
-}
preserve-CR<:-plug : ‚àÄ {Œì A B} {M M‚Ä≤ : Œì ‚ä¢ A} {F : Frame A B} {‚Ñì}
  ‚Üí CastsRespect<: (plug M F) ‚Ñì
  ‚Üí M ‚Äî‚Üí M‚Ä≤
    -----------------------------
  ‚Üí CastsRespect<: (plug M‚Ä≤ F) ‚Ñì

preserve-CR<: : ‚àÄ {Œì A} {M M‚Ä≤ : Œì ‚ä¢ A} {‚Ñì}
    ‚Üí CastsRespect<: M ‚Ñì
    ‚Üí M ‚Äî‚Üí M‚Ä≤
      --------------------
    ‚Üí CastsRespect<: M‚Ä≤ ‚Ñì

preserve-CR<:-plug {M = L} {L‚Ä≤} {F = F-¬∑‚ÇÅ M} (CR<:-¬∑ resp-L resp-M) rd = CR<:-¬∑ (preserve-CR<: resp-L rd) resp-M
preserve-CR<:-plug {F = F-¬∑‚ÇÇ L {v}} (CR<:-¬∑ resp-L resp-M) rd = CR<:-¬∑ resp-L (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-if M N} (CR<:-if resp-L resp-M resp-N) rd = CR<:-if (preserve-CR<: resp-L rd ) resp-M resp-N
preserve-CR<:-plug {F = F-√ó‚ÇÅ M} (CR<:-cons resp-M resp-N) rd = CR<:-cons resp-M (preserve-CR<: resp-N rd)
preserve-CR<:-plug {F = F-√ó‚ÇÇ N} (CR<:-cons resp-M resp-N) rd = CR<:-cons (preserve-CR<: resp-M rd) resp-N
preserve-CR<:-plug {F = F-fst} (CR<:-fst resp-M) rd = CR<:-fst (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-snd} (CR<:-snd resp-M) rd = CR<:-snd (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-inl} (CR<:-inl resp-M) rd = CR<:-inl (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-inr} (CR<:-inr resp-M) rd = CR<:-inr (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-case M N} (CR<:-case resp-L resp-M resp-N) rd = CR<:-case (preserve-CR<: resp-L rd) resp-M resp-N
preserve-CR<:-plug {F = F-cast c} (CR<:-cast-same-‚Ñì sub resp-M) rd = CR<:-cast-same-‚Ñì sub (preserve-CR<: resp-M rd)
preserve-CR<:-plug {F = F-cast c} (CR<:-cast-diff-‚Ñì neq resp-M) rd = CR<:-cast-diff-‚Ñì neq (preserve-CR<: resp-M rd)

preserve-CR<: resp (Œæ rd) = preserve-CR<:-plug resp rd
preserve-CR<: resp Œæ-blame = CR<:-blame-diff-‚Ñì (plug-blame-CR<:-inv resp)
preserve-CR<: resp (Œ≤ v) = {!!}
preserve-CR<: resp Œ¥ = CR<:-prim
preserve-CR<: (CR<:-if _ resp-M _) Œ≤-if-true = resp-M
preserve-CR<: (CR<:-if _ _ resp-M‚Ä≤) Œ≤-if-false = resp-M‚Ä≤
preserve-CR<: (CR<:-fst (CR<:-cons resp-M _)) (Œ≤-fst _ _) = resp-M
preserve-CR<: (CR<:-snd (CR<:-cons _ resp-N)) (Œ≤-snd _ _) = resp-N
preserve-CR<: (CR<:-case (CR<:-inl resp) resp-M _) (Œ≤-caseL x) = CR<:-¬∑ resp-M resp
preserve-CR<: (CR<:-case (CR<:-inr resp) _ resp-N) (Œ≤-caseR x) = CR<:-¬∑ resp-N resp
preserve-CR<: (CR<:-cast-same-‚Ñì {S~T = S~T} S<:T resp) (cast v {a}) =
  applyCast-same-‚Ñì-pres-CR<: S~T a S<:T resp
preserve-CR<: (CR<:-cast-diff-‚Ñì {S~T = S~T} ‚Ñì‚â¢‚Ñì‚Ä≤ resp) (cast v {a}) =
  applyCast-diff-‚Ñì-pres-CR<: S~T a ‚Ñì‚â¢‚Ñì‚Ä≤ resp
preserve-CR<: (CR<:-¬∑ (CR<:-cast-same-‚Ñì {S~T = S~T} (<:-‚áí sub-dom sub-cod) resp-V) resp-W) (fun-cast vV vW {x = x})
  rewrite dom-eq S~T x | cod-eq S~T x =
    CR<:-cast-same-‚Ñì sub-cod (CR<:-¬∑ resp-V (CR<:-cast-same-‚Ñì sub-dom resp-W))
preserve-CR<: (CR<:-¬∑ (CR<:-cast-diff-‚Ñì {S~T = S~T} ‚Ñì‚â¢ resp-V) resp-W) (fun-cast vV vW {x = x})
  rewrite dom-eq S~T x | cod-eq S~T x =
    CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ (CR<:-¬∑ resp-V (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ resp-W))
preserve-CR<: (CR<:-fst (CR<:-cast-same-‚Ñì {S~T = S~T} (<:-√ó sub-fst sub-snd) resp-V)) (fst-cast vV {x = x})
  rewrite fstC-eq S~T x =
    CR<:-cast-same-‚Ñì sub-fst (CR<:-fst resp-V)
preserve-CR<: (CR<:-fst (CR<:-cast-diff-‚Ñì {S~T = S~T} ‚Ñì‚â¢ resp-V)) (fst-cast vV {x = x})
  rewrite fstC-eq S~T x =
    CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ (CR<:-fst resp-V)
preserve-CR<: (CR<:-snd (CR<:-cast-same-‚Ñì {S~T = S~T} (<:-√ó sub-fst sub-snd) resp-V)) (snd-cast vV {x = x})
  rewrite sndC-eq S~T x =
    CR<:-cast-same-‚Ñì sub-snd (CR<:-snd resp-V)
preserve-CR<: (CR<:-snd (CR<:-cast-diff-‚Ñì {S~T = S~T} ‚Ñì‚â¢ resp-V)) (snd-cast vV {x = x})
  rewrite sndC-eq S~T x =
    CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ (CR<:-snd resp-V)
preserve-CR<: (CR<:-case (CR<:-cast-same-‚Ñì {S~T = S~T} (<:-‚äé sub-l sub-r) resp-V) resp-W‚ÇÅ resp-W‚ÇÇ) (case-cast vV {x = x})
  rewrite inlC-eq S~T x | inrC-eq S~T x =
    CR<:-case resp-V (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-same-‚Ñì sub-l CR<:-var))) (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-same-‚Ñì sub-r CR<:-var)))
preserve-CR<: (CR<:-case (CR<:-cast-diff-‚Ñì {S~T = S~T} ‚Ñì‚â¢ resp-V) resp-W‚ÇÅ resp-W‚ÇÇ) (case-cast vV {x = x})
  rewrite inlC-eq S~T x | inrC-eq S~T x =
    CR<:-case resp-V (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ CR<:-var))) (CR<:-∆õ (CR<:-¬∑ {!!} (CR<:-cast-diff-‚Ñì ‚Ñì‚â¢ CR<:-var)))
