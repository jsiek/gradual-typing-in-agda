module AGT where

  open import Agda.Primitive renaming (_‚äî_ to _‚äç_)
  open import Types
  open import Labels
  open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; Œ£; Œ£-syntax)
     renaming (_,_ to ‚ü®_,_‚ü©)
  open import Data.Bool using (Bool; true; false)
  open import Data.Nat using (‚Ñï; zero; suc; _‚â§_; _+_; z‚â§n; s‚â§s) renaming (_‚äî_ to _‚à®_)
  open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
  open import Data.Empty using (‚ä•; ‚ä•-elim)
  open import Relation.Binary.PropositionalEquality
     using (_‚â°_;_‚â¢_; refl; trans; sym; cong; cong‚ÇÇ; cong-app)
  open import Relation.Nullary using (¬¨_; Dec; yes; no)
  open import Relation.Nullary.Negation using (contradiction)

  data SType : Set where
    `_ : Base ‚Üí SType
    _‚áí_ : SType ‚Üí SType ‚Üí SType
    _`√ó_ : SType ‚Üí SType ‚Üí SType
    _`‚äé_ : SType ‚Üí SType ‚Üí SType

  to-type : SType ‚Üí Type
  to-type (` Œπ) = (` Œπ)
  to-type (S ‚áí T) = to-type S ‚áí to-type T
  to-type (S `√ó T) = to-type S `√ó to-type T
  to-type (S `‚äé T) = to-type S `‚äé to-type T

  data _‚å¢_ : SType ‚Üí SType ‚Üí Set where
    base‚å¢ : ‚àÄ{Œπ : Base} ‚Üí (` Œπ) ‚å¢ (` Œπ)
    fun‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A ‚áí B) ‚å¢ (A' ‚áí B')
    pair‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A `√ó B) ‚å¢ (A' `√ó B')
    sum‚å¢ : ‚àÄ{A B A' B'}
        -------------------
      ‚Üí (A `‚äé B) ‚å¢ (A' `‚äé B')
      
  {- Concretization -}

  data Conc : Type ‚Üí SType ‚Üí Set where
    c-base : ‚àÄ{Œπ} ‚Üí Conc (` Œπ) (` Œπ)
    c-fun : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ ‚áí T‚ÇÇ) (S‚ÇÅ ‚áí S‚ÇÇ)
    c-pair : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `√ó T‚ÇÇ) (S‚ÇÅ `√ó S‚ÇÇ)
    c-sum : ‚àÄ{T‚ÇÅ T‚ÇÇ : Type} {S‚ÇÅ S‚ÇÇ : SType}
       ‚Üí Conc T‚ÇÅ S‚ÇÅ  ‚Üí  Conc T‚ÇÇ S‚ÇÇ
         -------------------------
       ‚Üí Conc (T‚ÇÅ `‚äé T‚ÇÇ) (S‚ÇÅ `‚äé S‚ÇÇ)
    c-unk : ‚àÄ{S} ‚Üí Conc ‚ãÜ S

  infix 6 _`‚äë_
  data _`‚äë_ : Type ‚Üí Type ‚Üí Set where
    prec : ‚àÄ{A B}
          ‚Üí (‚àÄ{S} ‚Üí Conc A S ‚Üí Conc B S)
            ----------------------------
          ‚Üí A `‚äë B

  conc : (A : Type) ‚Üí Œ£[ S ‚àà SType ] Conc A S
  conc ‚ãÜ = ‚ü® ` ùîπ , c-unk ‚ü©
  conc (` Œπ) = ‚ü® ` Œπ , c-base ‚ü©
  conc (A ‚áí B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' ‚áí B' , c-fun ca cb ‚ü©
  conc (A `√ó B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `√ó B' , c-pair ca cb ‚ü©
  conc (A `‚äé B) with conc A | conc B
  ... | ‚ü® A' , ca ‚ü© | ‚ü® B' , cb ‚ü© =
      ‚ü® A' `‚äé B' , c-sum ca cb ‚ü©

  prec-unk-inv : ‚àÄ{A}
    ‚Üí ‚ãÜ `‚äë A
      ------
    ‚Üí A ‚â° ‚ãÜ
  prec-unk-inv {‚ãÜ} (prec f) = refl
  prec-unk-inv {` Œπ} (prec f) with f {` Œπ ‚áí ` Œπ} c-unk
  ... | ()
  prec-unk-inv {A ‚áí A‚ÇÅ} (prec f) with f {` Nat} c-unk
  ... | ()
  prec-unk-inv {A `√ó A‚ÇÅ} (prec f) with f {` Nat} c-unk
  ... | ()
  prec-unk-inv {A `‚äé A‚ÇÅ} (prec f) with f {` Nat} c-unk
  ... | ()

  prec-base-inv : ‚àÄ{A Œπ}
    ‚Üí ` Œπ `‚äë A
      ---------------
    ‚Üí A ‚â° ` Œπ ‚äé A ‚â° ‚ãÜ
  prec-base-inv {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-base-inv {` Œπ} {Œπ'} (prec f) with f {` Œπ'} c-base
  ... | c-base = inj‚ÇÅ refl
  prec-base-inv {A ‚áí A‚ÇÅ} {Œπ} (prec f) with f {` Œπ} c-base
  ... | ()
  prec-base-inv {A `√ó A‚ÇÅ} {Œπ} (prec f) with f {` Œπ} c-base
  ... | ()
  prec-base-inv {A `‚äé A‚ÇÅ} {Œπ} (prec f) with f {` Œπ} c-base
  ... | ()

  prec-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë (B‚ÇÅ ‚áí B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-fun-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-fun ca ca2)
    ... | c-fun a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-fun ca1 ca )
    ... | c-fun a b = b

  prec-left-fun-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ ‚áí A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ ‚áí B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {` Œπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ ‚áí B‚ÇÇ} (prec f) with prec-fun-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()
  prec-left-fun-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-fun ca1 ca2)
  ... | ()

  prec-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë (B‚ÇÅ `√ó B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-pair-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-pair ca ca2)
    ... | c-pair a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-pair ca1 ca )
    ... | c-pair a b = b

  prec-left-pair-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `√ó A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `√ó B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {` Œπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `√ó B‚ÇÇ} (prec f) with prec-pair-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©
  prec-left-pair-inv {A‚ÇÅ} {A‚ÇÇ} {B `‚äé B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-pair ca1 ca2)
  ... | ()

  prec-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë (B‚ÇÅ `‚äé B‚ÇÇ)
       -----------------------
     ‚Üí (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ)
  prec-sum-inv {A‚ÇÅ}{A‚ÇÇ}{B‚ÇÅ}{B‚ÇÇ} (prec f) =
    ‚ü® prec g , prec h ‚ü©
    where
    g : {S : SType} ‚Üí Conc A‚ÇÅ S ‚Üí Conc B‚ÇÅ S
    g ca with conc A‚ÇÇ
    ... | ‚ü® A‚ÇÇ' , ca2 ‚ü© with f (c-sum ca ca2)
    ... | c-sum a b = a
    
    h : {S : SType} ‚Üí Conc A‚ÇÇ S ‚Üí Conc B‚ÇÇ S
    h ca with conc A‚ÇÅ
    ... | ‚ü® A' , ca1 ‚ü© with f (c-sum ca1 ca )
    ... | c-sum a b = b

  prec-left-sum-inv : ‚àÄ{A‚ÇÅ A‚ÇÇ B}
     ‚Üí (A‚ÇÅ `‚äé A‚ÇÇ) `‚äë B
       -----------------------
     ‚Üí (Œ£[ B‚ÇÅ ‚àà Type ] Œ£[ B‚ÇÇ ‚àà Type ] (B ‚â° B‚ÇÅ `‚äé B‚ÇÇ) √ó (A‚ÇÅ `‚äë B‚ÇÅ) √ó (A‚ÇÇ `‚äë B‚ÇÇ))
       ‚äé B ‚â° ‚ãÜ
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {‚ãÜ} (prec f) = inj‚ÇÇ refl
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {` Œπ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B ‚áí B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B `√ó B‚ÇÅ} (prec f)
      with conc A‚ÇÅ | conc A‚ÇÇ
  ... | ‚ü® A‚ÇÅ' , ca1 ‚ü© | ‚ü® A‚ÇÇ' , ca2 ‚ü©
      with f (c-sum ca1 ca2)
  ... | ()
  prec-left-sum-inv {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ `‚äé B‚ÇÇ} (prec f) with prec-sum-inv (prec f)
  ... | ‚ü® a1b1 , a2b2 ‚ü© =
    inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® refl , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü©

  le-implies-prec : ‚àÄ {A B} ‚Üí A ‚äë B ‚Üí B `‚äë A
  
  le-implies-prec unk‚äë = prec (Œª {S} _ ‚Üí c-unk)
  le-implies-prec base‚äë = prec (Œª {S} z ‚Üí z)
  le-implies-prec (fun‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-fun x y) ‚Üí c-fun (imp1 x) (imp2 y) }
  le-implies-prec (pair‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-pair x y) ‚Üí c-pair (imp1 x) (imp2 y) }
  le-implies-prec (sum‚äë le‚ÇÅ le‚ÇÇ)
     with le-implies-prec le‚ÇÅ | le-implies-prec le‚ÇÇ
  ... | prec imp1 | prec imp2 =
     prec Œª { (c-sum x y) ‚Üí c-sum (imp1 x) (imp2 y) }

  prec-implies-le : ‚àÄ{A B} ‚Üí A `‚äë B ‚Üí B ‚äë A
  prec-implies-le {‚ãÜ} {B} (prec f) with prec-unk-inv (prec f)
  ... | eq rewrite eq = unk‚äë
  prec-implies-le {` Œπ} {B} (prec f) with prec-base-inv (prec f)
  ... | inj‚ÇÅ eq rewrite eq = base‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ ‚áí A‚ÇÇ} {B} (prec f) with prec-left-fun-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        fun‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `√ó A‚ÇÇ} {B} (prec f) with prec-left-pair-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        pair‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  prec-implies-le {A‚ÇÅ `‚äé A‚ÇÇ} {B} (prec f) with prec-left-sum-inv (prec f)
  ... | inj‚ÇÅ ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® eq , ‚ü® a1b1 , a2b2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite eq =
        sum‚äë (prec-implies-le a1b1) (prec-implies-le a2b2)
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë

  data _~'_ : Type ‚Üí Type ‚Üí Set where
    cons : ‚àÄ {A B : Type} {S : SType}
           ‚Üí Conc A S ‚Üí Conc B S
             -------------------
           ‚Üí A ~' B

  cons-implies-ceq : ‚àÄ {A B} ‚Üí A ~ B ‚Üí A ~' B
  cons-implies-ceq {.‚ãÜ}{B} unk~L with conc B
  ... | ‚ü® B' , cb ‚ü© = cons c-unk cb
  cons-implies-ceq {A}{‚ãÜ} unk~R with conc A
  ... | ‚ü® A' , ca ‚ü© = cons ca c-unk
  cons-implies-ceq base~ = cons c-base c-base
  cons-implies-ceq {A‚ÇÅ ‚áí A‚ÇÇ}{B‚ÇÅ ‚áí B‚ÇÇ} (fun~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-fun c2 c3) (c-fun c1 c4)
  cons-implies-ceq {A‚ÇÅ `√ó A‚ÇÇ}{B‚ÇÅ `√ó B‚ÇÇ} (pair~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-pair c1 c3) (c-pair c2 c4)
  cons-implies-ceq {A‚ÇÅ `‚äé A‚ÇÇ}{B‚ÇÅ `‚äé B‚ÇÇ} (sum~ cns‚ÇÅ cns‚ÇÇ)
      with cons-implies-ceq cns‚ÇÅ | cons-implies-ceq cns‚ÇÇ
  ... | cons{S = S‚ÇÅ} c1 c2 | cons{S = S‚ÇÇ} c3 c4 =
    cons (c-sum c1 c3) (c-sum c2 c4)

  ceq-implies-cons : ‚àÄ {A B} ‚Üí A ~' B ‚Üí A ~ B
  ceq-implies-cons {.(` _)} {.(` _)} (cons {S = .(` _)} c-base c-base) = base~
  ceq-implies-cons {.(` _)} {.‚ãÜ} (cons {S = .(` _)} c-base c-unk) = unk~R
  ceq-implies-cons (cons {S = .(_ ‚áí _)} (c-fun as as‚ÇÅ) (c-fun bs bs‚ÇÅ)) =
      fun~ (ceq-implies-cons (cons bs as)) (ceq-implies-cons (cons as‚ÇÅ bs‚ÇÅ))
  ceq-implies-cons (cons {S = .(_ ‚áí _)} (c-fun as as‚ÇÅ) c-unk) = unk~R
  ceq-implies-cons (cons {S = .(_ `√ó _)} (c-pair as as‚ÇÅ) (c-pair bs bs‚ÇÅ)) =
      pair~ (ceq-implies-cons (cons as bs)) (ceq-implies-cons (cons as‚ÇÅ bs‚ÇÅ))
  ceq-implies-cons (cons {S = .(_ `√ó _)} (c-pair as as‚ÇÅ) c-unk) = unk~R
  ceq-implies-cons (cons {S = .(_ `‚äé _)} (c-sum as as‚ÇÅ) (c-sum bs bs‚ÇÅ)) =
      sum~ (ceq-implies-cons (cons as bs)) (ceq-implies-cons (cons as‚ÇÅ bs‚ÇÅ))
  ceq-implies-cons (cons {S = .(_ `‚äé _)} (c-sum as as‚ÇÅ) c-unk) = unk~R
  ceq-implies-cons (cons {S = S} c-unk bs) = unk~L


  {- Abstraction -}

  data AllFuns : (SType ‚Üí Set) ‚Üí Set where
    funs : ‚àÄ{P}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
            T ‚â° T‚ÇÅ ‚áí T‚ÇÇ)
        -----------------------------------------------------
      ‚Üí AllFuns P

  data AllPairs : (SType ‚Üí Set) ‚Üí Set where
    pairs : ‚àÄ{P}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
            T ‚â° T‚ÇÅ `√ó T‚ÇÇ)
        -----------------------------------------------------
      ‚Üí AllPairs P

  data AllSums : (SType ‚Üí Set) ‚Üí Set where
    sums : ‚àÄ{P}
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
            T ‚â° T‚ÇÅ `‚äé T‚ÇÇ)
        -----------------------------------------------------
      ‚Üí AllSums P

  data Dom : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-dom : ‚àÄ{P : (SType ‚Üí Set)} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ)
        ---------------------------------------------
      ‚Üí Dom P T‚ÇÅ

  data Cod : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-cod : ‚àÄ{P} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ)
        ---------------------------------------------
      ‚Üí Cod P T‚ÇÇ

  data Proj‚ÇÅ : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-proj‚ÇÅ : ‚àÄ{P : (SType ‚Üí Set)} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ `√ó T‚ÇÇ)
        ---------------------------------------------
      ‚Üí Proj‚ÇÅ P T‚ÇÅ

  data Proj‚ÇÇ : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-proj‚ÇÇ : ‚àÄ{P : (SType ‚Üí Set)} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ `√ó T‚ÇÇ)
        ---------------------------------------------
      ‚Üí Proj‚ÇÇ P T‚ÇÇ

  data In‚ÇÅ : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-in‚ÇÅ : ‚àÄ{P : (SType ‚Üí Set)} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ `‚äé T‚ÇÇ)
        ---------------------------------------------
      ‚Üí In‚ÇÅ P T‚ÇÅ

  data In‚ÇÇ : (SType ‚Üí Set) ‚Üí SType ‚Üí Set where
    in-in‚ÇÇ : ‚àÄ{P : (SType ‚Üí Set)} {T‚ÇÅ T‚ÇÇ}
      ‚Üí P (T‚ÇÅ `‚äé T‚ÇÇ)
        ---------------------------------------------
      ‚Üí In‚ÇÇ P T‚ÇÇ

  data Abs : (SType ‚Üí Set) ‚Üí Type ‚Üí Set‚ÇÅ where
    abs-base : ‚àÄ{P : SType ‚Üí Set} {Œπ : Base}
      ‚Üí P (` Œπ)
      ‚Üí (‚àÄ{T : SType} ‚Üí P T ‚Üí T ‚â° ` Œπ)
        -------------------------------
      ‚Üí Abs P (` Œπ)
    abs-fun : ‚àÄ{P : SType ‚Üí Set}{A B : Type}
      ‚Üí AllFuns P
      ‚Üí Abs (Dom P) A
      ‚Üí Abs (Cod P) B
        ----------------------
      ‚Üí Abs P (A ‚áí B)
    abs-pair : ‚àÄ{P : SType ‚Üí Set}{A B : Type}
      ‚Üí AllPairs P
      ‚Üí Abs (Proj‚ÇÅ P) A
      ‚Üí Abs (Proj‚ÇÇ P) B
        ----------------------
      ‚Üí Abs P (A `√ó B)
    abs-sum : ‚àÄ{P : SType ‚Üí Set}{A B : Type}
      ‚Üí AllSums P
      ‚Üí Abs (In‚ÇÅ P) A
      ‚Üí Abs (In‚ÇÇ P) B
        ----------------------
      ‚Üí Abs P (A `‚äé B)
    abs-any : ‚àÄ{P : SType ‚Üí Set} {S T : SType}
      ‚Üí ¬¨ (S ‚å¢ T)
      ‚Üí P S ‚Üí P T
        ---------------
      ‚Üí Abs P ‚ãÜ

  abs-non-empty : ‚àÄ{P : SType ‚Üí Set}{A : Type}
                ‚Üí Abs P A
                ‚Üí Œ£[ T ‚àà SType ] P T
  abs-non-empty {P} {` Œπ} (abs-base x x‚ÇÅ) = ‚ü® ` Œπ , x ‚ü©
  abs-non-empty {P} {‚ãÜ} (abs-any{T = T} x x‚ÇÅ x‚ÇÇ) = ‚ü® T , x‚ÇÇ ‚ü©
  abs-non-empty {P} {_} (abs-fun x abs‚ÇÅ abs‚ÇÇ)
      with abs-non-empty abs‚ÇÅ
  ... | ‚ü® T‚ÇÅ , in-dom {T‚ÇÇ = T‚ÇÇ'} PT‚ÇÅT‚ÇÇ' ‚ü© =
        ‚ü® (T‚ÇÅ ‚áí T‚ÇÇ') , PT‚ÇÅT‚ÇÇ' ‚ü©
  abs-non-empty {P} {_} (abs-pair x abs‚ÇÅ abs‚ÇÇ)
      with abs-non-empty abs‚ÇÅ
  ... | ‚ü® T‚ÇÅ , in-proj‚ÇÅ {T‚ÇÇ = T‚ÇÇ'} PT‚ÇÅT‚ÇÇ' ‚ü© =
        ‚ü® (T‚ÇÅ `√ó T‚ÇÇ') , PT‚ÇÅT‚ÇÇ' ‚ü©
  abs-non-empty {P} {_} (abs-sum x abs‚ÇÅ abs‚ÇÇ)
      with abs-non-empty abs‚ÇÅ
  ... | ‚ü® T‚ÇÅ , in-in‚ÇÅ {T‚ÇÇ = T‚ÇÇ'} PT‚ÇÅT‚ÇÇ' ‚ü© =
        ‚ü® (T‚ÇÅ `‚äé T‚ÇÇ') , PT‚ÇÅT‚ÇÇ' ‚ü©

  _‚äÜ_ : (SType ‚Üí Set) ‚Üí (SType ‚Üí Set) ‚Üí Set
  P ‚äÜ P' = ‚àÄ{T : SType} ‚Üí P T ‚Üí P' T

  _‚áî_ : (SType ‚Üí Set) ‚Üí (SType ‚Üí Set) ‚Üí Set
  P ‚áî P' = P ‚äÜ P' √ó P' ‚äÜ P

  dom-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí Dom P ‚äÜ Dom Q
  dom-subset pq (in-dom x) = in-dom (pq x)

  proj‚ÇÅ-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí Proj‚ÇÅ P ‚äÜ Proj‚ÇÅ Q
  proj‚ÇÅ-subset pq (in-proj‚ÇÅ x) = in-proj‚ÇÅ (pq x)

  in‚ÇÅ-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí In‚ÇÅ P ‚äÜ In‚ÇÅ Q
  in‚ÇÅ-subset pq (in-in‚ÇÅ x) = in-in‚ÇÅ (pq x)

  cod-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí Cod P ‚äÜ Cod Q
  cod-subset pq (in-cod x) = in-cod (pq x)

  proj‚ÇÇ-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí Proj‚ÇÇ P ‚äÜ Proj‚ÇÇ Q
  proj‚ÇÇ-subset pq (in-proj‚ÇÇ x) = in-proj‚ÇÇ (pq x)

  in‚ÇÇ-subset : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚äÜ Q
            -------------
          ‚Üí In‚ÇÇ P ‚äÜ In‚ÇÇ Q
  in‚ÇÇ-subset pq (in-in‚ÇÇ x) = in-in‚ÇÇ (pq x)

  dom-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -------------
          ‚Üí Dom P ‚áî Dom Q
  dom-equiv pq = ‚ü® (dom-subset (proj‚ÇÅ pq)) , (dom-subset (proj‚ÇÇ pq)) ‚ü©

  cod-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -------------
          ‚Üí Cod P ‚áî Cod Q
  cod-equiv pq = ‚ü® (cod-subset (proj‚ÇÅ pq)) , (cod-subset (proj‚ÇÇ pq)) ‚ü©

  proj‚ÇÅ-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -----------------
          ‚Üí Proj‚ÇÅ P ‚áî Proj‚ÇÅ Q
  proj‚ÇÅ-equiv pq = ‚ü® (proj‚ÇÅ-subset (proj‚ÇÅ pq)) , (proj‚ÇÅ-subset (proj‚ÇÇ pq)) ‚ü©

  proj‚ÇÇ-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -------------
          ‚Üí Proj‚ÇÇ P ‚áî Proj‚ÇÇ Q
  proj‚ÇÇ-equiv pq = ‚ü® (proj‚ÇÇ-subset (proj‚ÇÅ pq)) , (proj‚ÇÇ-subset (proj‚ÇÇ pq)) ‚ü©

  in‚ÇÅ-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -----------------
          ‚Üí In‚ÇÅ P ‚áî In‚ÇÅ Q
  in‚ÇÅ-equiv pq = ‚ü® (in‚ÇÅ-subset (proj‚ÇÅ pq)) , (in‚ÇÅ-subset (proj‚ÇÇ pq)) ‚ü©

  in‚ÇÇ-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí  P ‚áî Q
            -------------
          ‚Üí In‚ÇÇ P ‚áî In‚ÇÇ Q
  in‚ÇÇ-equiv pq = ‚ü® (in‚ÇÇ-subset (proj‚ÇÅ pq)) , (in‚ÇÇ-subset (proj‚ÇÇ pq)) ‚ü©

  allfuns-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí AllFuns P   ‚Üí  P ‚áî Q
            --------------------
          ‚Üí AllFuns Q
  allfuns-equiv{P}{Q} (funs f) p-q = (funs G)
    where
    G : {T : SType} ‚Üí
           Q T ‚Üí Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ ‚áí T‚ÇÇ)))
    G {T} qt with f {T} ((proj‚ÇÇ p-q) qt)
    ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
          ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , refl ‚ü© ‚ü©

  allpairs-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí AllPairs P   ‚Üí  P ‚áî Q
            --------------------
          ‚Üí AllPairs Q
  allpairs-equiv{P}{Q} (pairs f) p-q = (pairs G)
    where
    G : {T : SType} ‚Üí
           Q T ‚Üí Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ `√ó T‚ÇÇ)))
    G {T} qt with f {T} ((proj‚ÇÇ p-q) qt)
    ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
          ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , refl ‚ü© ‚ü©

  allsums-equiv : ‚àÄ{P Q : SType ‚Üí Set}
          ‚Üí AllSums P   ‚Üí  P ‚áî Q
            --------------------
          ‚Üí AllSums Q
  allsums-equiv{P}{Q} (sums f) p-q = (sums G)
    where
    G : {T : SType} ‚Üí
           Q T ‚Üí Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ `‚äé T‚ÇÇ)))
    G {T} qt with f {T} ((proj‚ÇÇ p-q) qt)
    ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
          ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , refl ‚ü© ‚ü©

  abs-equiv : ‚àÄ{P Q : SType ‚Üí Set}{A : Type}
          ‚Üí Abs P A  ‚Üí  P ‚áî Q
            -----------------
          ‚Üí Abs Q A
  abs-equiv (abs-base x x‚ÇÅ) p-q =
     abs-base (proj‚ÇÅ p-q x) (Œª {T} z ‚Üí x‚ÇÅ (proj‚ÇÇ p-q z))
  abs-equiv{P}{Q} (abs-fun{A = A}{B = B} allf abs-dom-p abs-cod-p) p-q =
    let dp‚áîdq = dom-equiv p-q in
    let cp‚áîcq = cod-equiv p-q in
    abs-fun (allfuns-equiv allf p-q) (abs-equiv abs-dom-p (dom-equiv p-q))
                 (abs-equiv abs-cod-p (cod-equiv p-q) )
  abs-equiv{P}{Q} (abs-pair{A = A}{B = B} allf abs-dom-p abs-cod-p) p-q =
    let dp‚áîdq = proj‚ÇÅ-equiv p-q in
    let cp‚áîcq = proj‚ÇÇ-equiv p-q in
    abs-pair (allpairs-equiv allf p-q) (abs-equiv abs-dom-p (proj‚ÇÅ-equiv p-q))
                 (abs-equiv abs-cod-p (proj‚ÇÇ-equiv p-q) )
  abs-equiv{P}{Q} (abs-sum{A = A}{B = B} allf abs-dom-p abs-cod-p) p-q =
    let dp‚áîdq = in‚ÇÅ-equiv p-q in
    let cp‚áîcq = in‚ÇÇ-equiv p-q in
    abs-sum (allsums-equiv allf p-q) (abs-equiv abs-dom-p (in‚ÇÅ-equiv p-q))
                 (abs-equiv abs-cod-p (in‚ÇÇ-equiv p-q) )
  abs-equiv (abs-any x x‚ÇÅ x‚ÇÇ) p-q =
     abs-any x (proj‚ÇÅ p-q x‚ÇÅ) (proj‚ÇÅ p-q x‚ÇÇ)

  conc-abs-sound : ‚àÄ{P : SType ‚Üí Set}{A : Type}
     ‚Üí Abs P A  
       ----------
     ‚Üí P ‚äÜ Conc A
  conc-abs-sound (abs-base p-i p-base) {T} pt
      rewrite p-base {T} pt = c-base
  conc-abs-sound (abs-fun allfun abs-a abs-b) pt
      with allfun
  ... | funs af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
        let ih1 = conc-abs-sound abs-a in
        let ih2 = conc-abs-sound abs-b in
        c-fun (ih1 (in-dom pt)) (ih2 (in-cod pt))
  conc-abs-sound (abs-pair all abs-a abs-b) pt
      with all
  ... | pairs af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
        let ih1 = conc-abs-sound abs-a in
        let ih2 = conc-abs-sound abs-b in
        c-pair (ih1 (in-proj‚ÇÅ pt)) (ih2 (in-proj‚ÇÇ pt))
  conc-abs-sound (abs-sum all abs-a abs-b) pt
      with all
  ... | sums af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq =
        let ih1 = conc-abs-sound abs-a in
        let ih2 = conc-abs-sound abs-b in
        c-sum (ih1 (in-in‚ÇÅ pt)) (ih2 (in-in‚ÇÇ pt))
  conc-abs-sound (abs-any x x‚ÇÅ x‚ÇÇ) pt = c-unk

  c-any-base  : ‚àÄ{A Œπ}
     ‚Üí Conc A (` Œπ)
     ‚Üí A ‚â° (` Œπ) ‚äé A ‚â° ‚ãÜ
  c-any-base c-base = inj‚ÇÅ refl
  c-any-base c-unk = inj‚ÇÇ refl

  c-any-fun  : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A (T‚ÇÅ ‚áí T‚ÇÇ)
     ‚Üí (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ ‚áí A‚ÇÇ √ó Conc A‚ÇÅ T‚ÇÅ √ó Conc A‚ÇÇ T‚ÇÇ)
       ‚äé A ‚â° ‚ãÜ
  c-any-fun (c-fun{T‚ÇÅ}{T‚ÇÇ} c c‚ÇÅ) =
      inj‚ÇÅ ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® c , c‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©
  c-any-fun c-unk = inj‚ÇÇ refl

  c-any-pair  : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A (T‚ÇÅ `√ó T‚ÇÇ)
     ‚Üí (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ `√ó A‚ÇÇ √ó Conc A‚ÇÅ T‚ÇÅ √ó Conc A‚ÇÇ T‚ÇÇ)
       ‚äé A ‚â° ‚ãÜ
  c-any-pair (c-pair{T‚ÇÅ}{T‚ÇÇ} c c‚ÇÅ) =
      inj‚ÇÅ ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® c , c‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©
  c-any-pair c-unk = inj‚ÇÇ refl

  c-any-sum  : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A (T‚ÇÅ `‚äé T‚ÇÇ)
     ‚Üí (Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ `‚äé A‚ÇÇ √ó Conc A‚ÇÅ T‚ÇÅ √ó Conc A‚ÇÇ T‚ÇÇ)
       ‚äé A ‚â° ‚ãÜ
  c-any-sum (c-sum{T‚ÇÅ}{T‚ÇÇ} c c‚ÇÅ) =
      inj‚ÇÅ ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® c , c‚ÇÅ ‚ü© ‚ü© ‚ü© ‚ü©
  c-any-sum c-unk = inj‚ÇÇ refl

  conc-sh-cons : ‚àÄ{A T‚ÇÅ T‚ÇÇ}
     ‚Üí Conc A T‚ÇÅ  ‚Üí  Conc A T‚ÇÇ
       -----------------------
     ‚Üí A ‚â° ‚ãÜ ‚äé (T‚ÇÅ ‚å¢ T‚ÇÇ)
  conc-sh-cons c-base c-base = inj‚ÇÇ base‚å¢
  conc-sh-cons (c-fun a-t1 a-t3) (c-fun a-t2 a-t4) = inj‚ÇÇ fun‚å¢
  conc-sh-cons (c-pair a-t1 a-t3) (c-pair a-t2 a-t4) = inj‚ÇÇ pair‚å¢
  conc-sh-cons (c-sum a-t1 a-t3) (c-sum a-t2 a-t4) = inj‚ÇÇ sum‚å¢
  conc-sh-cons c-unk a-t2 = inj‚ÇÅ refl

  abs-optimal : ‚àÄ {P : SType ‚Üí Set} {A A' : Type}
    ‚Üí (Œ£[ T ‚àà SType ] P T)
    ‚Üí P ‚äÜ Conc A  ‚Üí  Abs P A'
      -------------------------
    ‚Üí A ‚äë A'
  abs-optimal ‚ü® T , pt ‚ü© p-ca (abs-base p-i all-base)
      with pt
  ... | pt'
      rewrite all-base pt
      with c-any-base (p-ca pt') 
  ... | inj‚ÇÅ eq rewrite eq = Refl‚äë
  ... | inj‚ÇÇ eq rewrite eq = unk‚äë
  abs-optimal{P = P} ‚ü® T , pt ‚ü© p-ca (abs-fun{A = A}{B = B} allf abs-p1-b1 abs-p2-b2)
      with allf
  ... | funs af
      with af pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq 
      with c-any-fun (p-ca pt)
  ... | inj‚ÇÅ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® a=a12 , ‚ü® c1 , c2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite a=a12 =
      let ih1 = abs-optimal ‚ü® T‚ÇÅ , in-dom pt ‚ü© domP‚äÜca1 abs-p1-b1 in
      let ih2 = abs-optimal ‚ü® T‚ÇÇ , in-cod pt ‚ü© codP‚äÜca2 abs-p2-b2 in
      fun‚äë ih1 ih2
      where domP‚äÜca1 : Dom P ‚äÜ Conc A‚ÇÅ
            domP‚äÜca1 {T'} (in-dom {T‚ÇÇ = T‚ÇÇ} PT'‚áíT2)
                with p-ca PT'‚áíT2 
            ... | c-fun c-a1t' c-a2t2 = c-a1t'

            codP‚äÜca2 : Cod P ‚äÜ Conc A‚ÇÇ
            codP‚äÜca2 {T'} (in-cod {T‚ÇÅ = T‚ÇÅ} PT‚ÇÅ‚áíT')
                with p-ca PT‚ÇÅ‚áíT'
            ... | c-fun c1 c2 = c2
  ... | inj‚ÇÇ a=unk rewrite a=unk =
        unk‚äë
  abs-optimal{P = P} ‚ü® T , pt ‚ü© p-ca (abs-pair{A = A}{B = B} all abs-p1-b1 abs-p2-b2)
      with all
  ... | pairs ap
      with ap pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq 
      with c-any-pair (p-ca pt)
  ... | inj‚ÇÅ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® a=a12 , ‚ü® c1 , c2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite a=a12 =
      let ih1 = abs-optimal ‚ü® T‚ÇÅ , in-proj‚ÇÅ pt ‚ü© domP‚äÜca1 abs-p1-b1 in
      let ih2 = abs-optimal ‚ü® T‚ÇÇ , in-proj‚ÇÇ pt ‚ü© codP‚äÜca2 abs-p2-b2 in
      pair‚äë ih1 ih2
      where domP‚äÜca1 : Proj‚ÇÅ P ‚äÜ Conc A‚ÇÅ
            domP‚äÜca1 {T'} (in-proj‚ÇÅ {T‚ÇÇ = T‚ÇÇ} PT'‚áíT2)
                with p-ca PT'‚áíT2 
            ... | c-pair c-a1t' c-a2t2 = c-a1t'

            codP‚äÜca2 : Proj‚ÇÇ P ‚äÜ Conc A‚ÇÇ
            codP‚äÜca2 {T'} (in-proj‚ÇÇ {T‚ÇÅ = T‚ÇÅ} PT‚ÇÅ‚áíT')
                with p-ca PT‚ÇÅ‚áíT'
            ... | c-pair c1 c2 = c2
  ... | inj‚ÇÇ a=unk rewrite a=unk =
        unk‚äë
  abs-optimal{P = P} ‚ü® T , pt ‚ü© p-ca (abs-sum{A = A}{B = B} all abs-p1-b1 abs-p2-b2)
      with all
  ... | sums ap
      with ap pt
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , eq ‚ü© ‚ü© rewrite eq 
      with c-any-sum (p-ca pt)
  ... | inj‚ÇÅ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® a=a12 , ‚ü® c1 , c2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite a=a12 =
      let ih1 = abs-optimal ‚ü® T‚ÇÅ , in-in‚ÇÅ pt ‚ü© domP‚äÜca1 abs-p1-b1 in
      let ih2 = abs-optimal ‚ü® T‚ÇÇ , in-in‚ÇÇ pt ‚ü© codP‚äÜca2 abs-p2-b2 in
      sum‚äë ih1 ih2
      where domP‚äÜca1 : In‚ÇÅ P ‚äÜ Conc A‚ÇÅ
            domP‚äÜca1 {T'} (in-in‚ÇÅ {T‚ÇÇ = T‚ÇÇ} PT'‚áíT2)
                with p-ca PT'‚áíT2 
            ... | c-sum c-a1t' c-a2t2 = c-a1t'

            codP‚äÜca2 : In‚ÇÇ P ‚äÜ Conc A‚ÇÇ
            codP‚äÜca2 {T'} (in-in‚ÇÇ {T‚ÇÅ = T‚ÇÅ} PT‚ÇÅ‚áíT')
                with p-ca PT‚ÇÅ‚áíT'
            ... | c-sum c1 c2 = c2
  ... | inj‚ÇÇ a=unk rewrite a=unk =
        unk‚äë
  abs-optimal ‚ü® T , pt ‚ü© p-ca (abs-any a b c )
      with conc-sh-cons (p-ca b) (p-ca c) 
  ... | inj‚ÇÅ A‚â°‚ãÜ rewrite A‚â°‚ãÜ = 
        unk‚äë
  ... | inj‚ÇÇ x = 
        contradiction x a

  all-funs-conc‚áí : ‚àÄ{A B} ‚Üí AllFuns (Conc (A ‚áí B))
  all-funs-conc‚áí{A}{B} = funs f
    where f : {T : SType} ‚Üí Conc (A ‚áí B) T ‚Üí
              Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ ‚áí T‚ÇÇ)))
          f {.(_ ‚áí _)} (c-fun{S‚ÇÅ = S‚ÇÅ}{S‚ÇÇ = S‚ÇÇ} c c‚ÇÅ) = ‚ü® S‚ÇÅ , ‚ü® S‚ÇÇ , refl ‚ü© ‚ü©

  all-pairs-conc√ó : ‚àÄ{A B} ‚Üí AllPairs (Conc (A `√ó B))
  all-pairs-conc√ó{A}{B} = pairs f
    where f : {T : SType} ‚Üí Conc (A `√ó B) T ‚Üí
              Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ `√ó T‚ÇÇ)))
          f {.(_ `√ó _)} (c-pair{S‚ÇÅ = S‚ÇÅ}{S‚ÇÇ = S‚ÇÇ} c c‚ÇÅ) = ‚ü® S‚ÇÅ , ‚ü® S‚ÇÇ , refl ‚ü© ‚ü©

  all-sums-conc‚äé : ‚àÄ{A B} ‚Üí AllSums (Conc (A `‚äé B))
  all-sums-conc‚äé{A}{B} = sums f
    where f : {T : SType} ‚Üí Conc (A `‚äé B) T ‚Üí
              Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ `‚äé T‚ÇÇ)))
          f {.(_ `‚äé _)} (c-sum{S‚ÇÅ = S‚ÇÅ}{S‚ÇÇ = S‚ÇÇ} c c‚ÇÅ) = ‚ü® S‚ÇÅ , ‚ü® S‚ÇÇ , refl ‚ü© ‚ü©

  dom-conc‚áí‚äÜ : ‚àÄ{A B} ‚Üí Dom (Conc (A ‚áí B)) ‚äÜ Conc A
  dom-conc‚áí‚äÜ (in-dom (c-fun x x‚ÇÅ)) = x

  proj‚ÇÅ-conc√ó‚äÜ : ‚àÄ{A B} ‚Üí Proj‚ÇÅ (Conc (A `√ó B)) ‚äÜ Conc A
  proj‚ÇÅ-conc√ó‚äÜ (in-proj‚ÇÅ (c-pair x x‚ÇÅ)) = x

  in‚ÇÅ-conc‚äé‚äÜ : ‚àÄ{A B} ‚Üí In‚ÇÅ (Conc (A `‚äé B)) ‚äÜ Conc A
  in‚ÇÅ-conc‚äé‚äÜ (in-in‚ÇÅ (c-sum x x‚ÇÅ)) = x

  cod-conc‚áí‚äÜ : ‚àÄ{A B} ‚Üí Cod (Conc (A ‚áí B)) ‚äÜ Conc B
  cod-conc‚áí‚äÜ (in-cod (c-fun x x‚ÇÅ)) = x‚ÇÅ

  proj‚ÇÇ-conc√ó‚äÜ : ‚àÄ{A B} ‚Üí Proj‚ÇÇ (Conc (A `√ó B)) ‚äÜ Conc B
  proj‚ÇÇ-conc√ó‚äÜ (in-proj‚ÇÇ (c-pair x x‚ÇÅ)) = x‚ÇÅ

  in‚ÇÇ-conc‚äé‚äÜ : ‚àÄ{A B} ‚Üí In‚ÇÇ (Conc (A `‚äé B)) ‚äÜ Conc B
  in‚ÇÇ-conc‚äé‚äÜ (in-in‚ÇÇ (c-sum x x‚ÇÅ)) = x‚ÇÅ

  conc-dom‚áí‚äÜ : ‚àÄ{A B} ‚Üí Conc A ‚äÜ Dom (Conc (A ‚áí B))
  conc-dom‚áí‚äÜ {Œπ}{B} c-base with conc B
  ... | ‚ü® B' , x ‚ü© = in-dom (c-fun c-base x)
  conc-dom‚áí‚äÜ {B = B} (c-fun c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-dom (c-fun (c-fun c c‚ÇÅ) x)
  conc-dom‚áí‚äÜ {B = B} (c-pair c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-dom (c-fun (c-pair c c‚ÇÅ) x)
  conc-dom‚áí‚äÜ {B = B} (c-sum c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-dom (c-fun (c-sum c c‚ÇÅ) x)
  conc-dom‚áí‚äÜ {B = B} c-unk with conc B
  ... | ‚ü® B' , x ‚ü© = in-dom (c-fun c-unk x)

  conc-proj‚ÇÅ√ó‚äÜ : ‚àÄ{A B} ‚Üí Conc A ‚äÜ Proj‚ÇÅ (Conc (A `√ó B))
  conc-proj‚ÇÅ√ó‚äÜ {Œπ}{B} c-base with conc B
  ... | ‚ü® B' , x ‚ü© = in-proj‚ÇÅ (c-pair c-base x)
  conc-proj‚ÇÅ√ó‚äÜ {B = B} (c-fun c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-proj‚ÇÅ (c-pair (c-fun c c‚ÇÅ) x)
  conc-proj‚ÇÅ√ó‚äÜ {B = B} (c-pair c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-proj‚ÇÅ (c-pair (c-pair c c‚ÇÅ) x)
  conc-proj‚ÇÅ√ó‚äÜ {B = B} (c-sum c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-proj‚ÇÅ (c-pair (c-sum c c‚ÇÅ) x)
  conc-proj‚ÇÅ√ó‚äÜ {B = B} c-unk with conc B
  ... | ‚ü® B' , x ‚ü© = in-proj‚ÇÅ (c-pair c-unk x)

  conc-in‚ÇÅ‚äé‚äÜ : ‚àÄ{A B} ‚Üí Conc A ‚äÜ In‚ÇÅ (Conc (A `‚äé B))
  conc-in‚ÇÅ‚äé‚äÜ {Œπ}{B} c-base with conc B
  ... | ‚ü® B' , x ‚ü© = in-in‚ÇÅ (c-sum c-base x)
  conc-in‚ÇÅ‚äé‚äÜ {B = B} (c-fun c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-in‚ÇÅ (c-sum (c-fun c c‚ÇÅ) x)
  conc-in‚ÇÅ‚äé‚äÜ {B = B} (c-pair c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-in‚ÇÅ (c-sum (c-pair c c‚ÇÅ) x)
  conc-in‚ÇÅ‚äé‚äÜ {B = B} (c-sum c c‚ÇÅ) with conc B
  ... | ‚ü® B' , x ‚ü© = in-in‚ÇÅ (c-sum (c-sum c c‚ÇÅ) x)
  conc-in‚ÇÅ‚äé‚äÜ {B = B} c-unk with conc B
  ... | ‚ü® B' , x ‚ü© = in-in‚ÇÅ (c-sum c-unk x)

  conc-cod‚áí‚äÜ : ‚àÄ{A B} ‚Üí Conc B ‚äÜ Cod (Conc (A ‚áí B))
  conc-cod‚áí‚äÜ {A} {.(` _)} c-base with conc A
  ... | ‚ü® A' , x ‚ü© = in-cod (c-fun x c-base)
  conc-cod‚áí‚äÜ {A} {.(_ ‚áí _)} (c-fun cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-cod (c-fun x (c-fun cb cb‚ÇÅ))
  conc-cod‚áí‚äÜ {A} {.(_ `√ó _)} (c-pair cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-cod (c-fun x (c-pair cb cb‚ÇÅ))
  conc-cod‚áí‚äÜ {A} {.(_ `‚äé _)} (c-sum cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-cod (c-fun x (c-sum cb cb‚ÇÅ))
  conc-cod‚áí‚äÜ {A} {.‚ãÜ} c-unk with conc A
  ... | ‚ü® A' , x ‚ü© = in-cod (c-fun x c-unk)

  conc-proj‚ÇÇ√ó‚äÜ : ‚àÄ{A B} ‚Üí Conc B ‚äÜ Proj‚ÇÇ (Conc (A `√ó B))
  conc-proj‚ÇÇ√ó‚äÜ {A} {.(` _)} c-base with conc A
  ... | ‚ü® A' , x ‚ü© = in-proj‚ÇÇ (c-pair x c-base)
  conc-proj‚ÇÇ√ó‚äÜ {A} {.(_ ‚áí _)} (c-fun cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-proj‚ÇÇ (c-pair x (c-fun cb cb‚ÇÅ))
  conc-proj‚ÇÇ√ó‚äÜ {A} {.(_ `√ó _)} (c-pair cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-proj‚ÇÇ (c-pair x (c-pair cb cb‚ÇÅ))
  conc-proj‚ÇÇ√ó‚äÜ {A} {.(_ `‚äé _)} (c-sum cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-proj‚ÇÇ (c-pair x (c-sum cb cb‚ÇÅ))
  conc-proj‚ÇÇ√ó‚äÜ {A} {.‚ãÜ} c-unk with conc A
  ... | ‚ü® A' , x ‚ü© = in-proj‚ÇÇ (c-pair x c-unk)

  conc-in‚ÇÇ‚äé‚äÜ : ‚àÄ{A B} ‚Üí Conc B ‚äÜ In‚ÇÇ (Conc (A `‚äé B))
  conc-in‚ÇÇ‚äé‚äÜ {A} {.(` _)} c-base with conc A
  ... | ‚ü® A' , x ‚ü© = in-in‚ÇÇ (c-sum x c-base)
  conc-in‚ÇÇ‚äé‚äÜ {A} {.(_ ‚áí _)} (c-fun cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-in‚ÇÇ (c-sum x (c-fun cb cb‚ÇÅ))
  conc-in‚ÇÇ‚äé‚äÜ {A} {.(_ `√ó _)} (c-pair cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-in‚ÇÇ (c-sum x (c-pair cb cb‚ÇÅ))
  conc-in‚ÇÇ‚äé‚äÜ {A} {.(_ `‚äé _)} (c-sum cb cb‚ÇÅ) with conc A
  ... | ‚ü® A' , x ‚ü© = in-in‚ÇÇ (c-sum x (c-sum cb cb‚ÇÅ))
  conc-in‚ÇÇ‚äé‚äÜ {A} {.‚ãÜ} c-unk with conc A
  ... | ‚ü® A' , x ‚ü© = in-in‚ÇÇ (c-sum x c-unk)

  dom-conc‚áí‚áî : ‚àÄ{A B} ‚Üí Dom (Conc (A ‚áí B)) ‚áî Conc A
  dom-conc‚áí‚áî = ‚ü® dom-conc‚áí‚äÜ , conc-dom‚áí‚äÜ ‚ü©

  proj‚ÇÅ-conc√ó‚áî : ‚àÄ{A B} ‚Üí Proj‚ÇÅ (Conc (A `√ó B)) ‚áî Conc A
  proj‚ÇÅ-conc√ó‚áî = ‚ü® proj‚ÇÅ-conc√ó‚äÜ , conc-proj‚ÇÅ√ó‚äÜ ‚ü©

  in‚ÇÅ-conc‚äé‚áî : ‚àÄ{A B} ‚Üí In‚ÇÅ (Conc (A `‚äé B)) ‚áî Conc A
  in‚ÇÅ-conc‚äé‚áî = ‚ü® in‚ÇÅ-conc‚äé‚äÜ , conc-in‚ÇÅ‚äé‚äÜ ‚ü©

  cod-conc‚áí‚áî : ‚àÄ{A B} ‚Üí Cod (Conc (A ‚áí B)) ‚áî Conc B
  cod-conc‚áí‚áî = ‚ü® cod-conc‚áí‚äÜ , conc-cod‚áí‚äÜ ‚ü©

  proj‚ÇÇ-conc√ó‚áî : ‚àÄ{A B} ‚Üí Proj‚ÇÇ (Conc (A `√ó B)) ‚áî Conc B
  proj‚ÇÇ-conc√ó‚áî = ‚ü® proj‚ÇÇ-conc√ó‚äÜ , conc-proj‚ÇÇ√ó‚äÜ ‚ü©

  in‚ÇÇ-conc‚äé‚áî : ‚àÄ{A B} ‚Üí In‚ÇÇ (Conc (A `‚äé B)) ‚áî Conc B
  in‚ÇÇ-conc‚äé‚áî = ‚ü® in‚ÇÇ-conc‚äé‚äÜ , conc-in‚ÇÇ‚äé‚äÜ ‚ü©

  Sym‚áî : ‚àÄ{P Q} ‚Üí P ‚áî Q ‚Üí Q ‚áî P
  Sym‚áî pq = ‚ü® (proj‚ÇÇ pq) , (proj‚ÇÅ pq) ‚ü©

{-
   Corollary abs-optimimal and conc-abs-sound:

   Œ±(Œ≥(A)) = A

   -}

  conc-abs-id : ‚àÄ{A B : Type}{P : SType ‚Üí Set}
    ‚Üí Abs (Conc A) B
      -------------------
    ‚Üí A ‚â° B
  conc-abs-id {A}{B}{P} abs-conc-ab =
    let A‚äëB = (abs-optimal {Conc A}{A}{B} (conc A) (Œª {T} z ‚Üí z)) abs-conc-ab in
    let B‚äëA = prec-implies-le (prec (conc-abs-sound abs-conc-ab)) in
    AntiSym‚äë A‚äëB B‚äëA

  conc-abs-id2 : ‚àÄ{A : Type}{P : SType ‚Üí Set}
    ‚Üí Abs (Conc A) A
  conc-abs-id2 {‚ãÜ} {P} = abs-any{S = ` Nat}{T = ` ùîπ} (Œª ()) c-unk c-unk
  conc-abs-id2 {` x} {P} = abs-base c-base G
     where G : {T : SType} ‚Üí Conc (` x) T ‚Üí T ‚â° (` x)
           G {.(` _)} c-base = refl
  conc-abs-id2 {A ‚áí B} {P} =
     let x1 = Sym‚áî (dom-conc‚áí‚áî {A} {B}) in
     let ih1 = conc-abs-id2 {A} {P} in 
     let y1 = abs-equiv ih1 x1 in
     let x2 = Sym‚áî (cod-conc‚áí‚áî {A} {B}) in
     let ih2 = conc-abs-id2 {B} {P} in 
     let y2 = abs-equiv ih2 x2 in
     abs-fun all-funs-conc‚áí y1 y2
  conc-abs-id2 {A `√ó B} {P} =
     let x1 = Sym‚áî (proj‚ÇÅ-conc√ó‚áî {A} {B}) in
     let ih1 = conc-abs-id2 {A} {P} in 
     let y1 = abs-equiv ih1 x1 in
     let x2 = Sym‚áî (proj‚ÇÇ-conc√ó‚áî {A} {B}) in
     let ih2 = conc-abs-id2 {B} {P} in 
     let y2 = abs-equiv ih2 x2 in
     abs-pair all-pairs-conc√ó y1 y2
  conc-abs-id2 {A `‚äé B} {P} =
     let x1 = Sym‚áî (in‚ÇÅ-conc‚äé‚áî {A} {B}) in
     let ih1 = conc-abs-id2 {A} {P} in 
     let y1 = abs-equiv ih1 x1 in
     let x2 = Sym‚áî (in‚ÇÇ-conc‚äé‚áî {A} {B}) in
     let ih2 = conc-abs-id2 {B} {P} in 
     let y2 = abs-equiv ih2 x2 in
     abs-sum all-sums-conc‚äé y1 y2
  


  {-
   Def. of interior based on Prop 15 and a little subsequent reasoning.
   -}

  data L (P : SType ‚Üí SType ‚Üí Set) (G‚ÇÅ : Type) (G‚ÇÇ : Type) : SType ‚Üí Set where
    leftp : ‚àÄ{T‚ÇÅ T‚ÇÇ : SType}
           ‚Üí Conc G‚ÇÅ T‚ÇÅ  ‚Üí  Conc G‚ÇÇ T‚ÇÇ  ‚Üí  P T‚ÇÅ T‚ÇÇ
             -------------------------------------
           ‚Üí L P G‚ÇÅ G‚ÇÇ T‚ÇÅ

  data R (P : SType ‚Üí SType ‚Üí Set) (G‚ÇÅ : Type) (G‚ÇÇ : Type) : SType ‚Üí Set where
    rightp : ‚àÄ{T‚ÇÅ T‚ÇÇ : SType}
           ‚Üí Conc G‚ÇÅ T‚ÇÅ  ‚Üí  Conc G‚ÇÇ T‚ÇÇ  ‚Üí  P T‚ÇÅ T‚ÇÇ
             -------------------------------------
           ‚Üí R P G‚ÇÅ G‚ÇÇ T‚ÇÇ

  data Interior {n : Level} (P : SType ‚Üí SType ‚Üí Set)
               : Type ‚Üí Type ‚Üí Type ‚Üí Type ‚Üí Set‚ÇÅ where
    inter : ‚àÄ{G‚ÇÅ G‚ÇÇ G‚ÇÉ G‚ÇÑ}
          ‚Üí Abs (L P G‚ÇÅ G‚ÇÇ) G‚ÇÉ
          ‚Üí Abs (R P G‚ÇÅ G‚ÇÇ) G‚ÇÑ
            ----------------------
          ‚Üí Interior P G‚ÇÅ G‚ÇÇ G‚ÇÉ G‚ÇÑ

  L‚áí-intro : ‚àÄ{P : SType ‚Üí SType ‚Üí Set}{G‚ÇÅ‚ÇÅ G‚ÇÅ‚ÇÇ G‚ÇÇ‚ÇÅ G‚ÇÇ‚ÇÇ T‚ÇÅ T‚ÇÇ}
      ‚Üí (‚àÄ{T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ : SType} ‚Üí P T‚ÇÅ T‚ÇÉ ‚Üí P T‚ÇÇ T‚ÇÑ ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ) (T‚ÇÉ ‚áí T‚ÇÑ))
      ‚Üí L P G‚ÇÅ‚ÇÅ G‚ÇÇ‚ÇÅ T‚ÇÅ ‚Üí L P G‚ÇÅ‚ÇÇ G‚ÇÇ‚ÇÇ T‚ÇÇ
      ‚Üí L P (G‚ÇÅ‚ÇÅ ‚áí G‚ÇÅ‚ÇÇ) (G‚ÇÇ‚ÇÅ ‚áí G‚ÇÇ‚ÇÇ) (T‚ÇÅ ‚áí T‚ÇÇ)
  L‚áí-intro p (leftp x x‚ÇÅ x‚ÇÇ) (leftp x‚ÇÉ x‚ÇÑ x‚ÇÖ) =
      leftp (c-fun x x‚ÇÉ) (c-fun x‚ÇÅ x‚ÇÑ) (p x‚ÇÇ x‚ÇÖ)
 
  L‚áí-elim : ‚àÄ{P : SType ‚Üí SType ‚Üí Set}{G‚ÇÅ‚ÇÅ G‚ÇÅ‚ÇÇ G‚ÇÇ‚ÇÅ G‚ÇÇ‚ÇÇ T‚ÇÅ T‚ÇÇ}
      ‚Üí (‚àÄ{T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ : SType} ‚Üí P (T‚ÇÅ ‚áí T‚ÇÇ) (T‚ÇÉ ‚áí T‚ÇÑ) ‚Üí P T‚ÇÅ T‚ÇÉ √ó P T‚ÇÇ T‚ÇÑ)
      ‚Üí L P (G‚ÇÅ‚ÇÅ ‚áí G‚ÇÅ‚ÇÇ) (G‚ÇÇ‚ÇÅ ‚áí G‚ÇÇ‚ÇÇ) (T‚ÇÅ ‚áí T‚ÇÇ)
      ‚Üí L P G‚ÇÅ‚ÇÅ G‚ÇÇ‚ÇÅ T‚ÇÅ √ó L P G‚ÇÅ‚ÇÇ G‚ÇÇ‚ÇÇ T‚ÇÇ
  L‚áí-elim p (leftp (c-fun x x‚ÇÑ) (c-fun x‚ÇÅ x‚ÇÉ) x‚ÇÇ) =
     ‚ü® (leftp x x‚ÇÅ (proj‚ÇÅ (p x‚ÇÇ))) , leftp x‚ÇÑ x‚ÇÉ (proj‚ÇÇ (p x‚ÇÇ)) ‚ü©

  data STypeEq (A : SType) (B : SType) : Set where
    stype-eq : A ‚â° B ‚Üí STypeEq A B

  L=‚Üícc : ‚àÄ{G‚ÇÅ G‚ÇÇ T} ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T ‚Üí Conc G‚ÇÅ T √ó Conc G‚ÇÇ T
  L=‚Üícc (leftp x x‚ÇÅ (stype-eq refl)) = ‚ü® x , x‚ÇÅ ‚ü©

  cc‚ÜíL= : ‚àÄ{G‚ÇÅ G‚ÇÇ T} ‚Üí Conc G‚ÇÅ T ‚Üí Conc G‚ÇÇ T ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T
  cc‚ÜíL= g1t g2t = leftp g1t g2t (stype-eq refl)

  L=‚ÜíR= : ‚àÄ{G‚ÇÅ G‚ÇÇ T} ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T ‚Üí R STypeEq G‚ÇÅ G‚ÇÇ T
  L=‚ÜíR= (leftp x x‚ÇÅ (stype-eq refl)) = rightp x x‚ÇÅ (stype-eq refl)

  R=‚ÜíL= : ‚àÄ{G‚ÇÅ G‚ÇÇ T} ‚Üí R STypeEq G‚ÇÅ G‚ÇÇ T ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T
  R=‚ÜíL= (rightp x x‚ÇÅ (stype-eq refl)) = leftp x x‚ÇÅ (stype-eq refl)

  L=‚áîR= : ‚àÄ{G‚ÇÅ G‚ÇÇ} ‚Üí R STypeEq G‚ÇÅ G‚ÇÇ ‚áî L STypeEq G‚ÇÅ G‚ÇÇ
  L=‚áîR= = ‚ü® R=‚ÜíL= , L=‚ÜíR= ‚ü©

  cct-consis : ‚àÄ{G1 G2 T} ‚Üí Conc G1 T ‚Üí Conc G2 T ‚Üí G1 ~ G2
  cct-consis c-base c-base = base~
  cct-consis c-base c-unk = unk~R
  cct-consis (c-fun c1t c1t‚ÇÅ) (c-fun c2t c2t‚ÇÅ) =
      fun~ (cct-consis c2t c1t) (cct-consis c1t‚ÇÅ c2t‚ÇÅ)
  cct-consis (c-fun c1t c1t‚ÇÅ) c-unk = unk~R
  cct-consis (c-pair c1t c1t‚ÇÅ) (c-pair c2t c2t‚ÇÅ) =
      pair~ (cct-consis c1t c2t) (cct-consis c1t‚ÇÅ c2t‚ÇÅ)
  cct-consis (c-pair c1t c1t‚ÇÅ) c-unk = unk~R
  cct-consis (c-sum c1t c1t‚ÇÅ) (c-sum c2t c2t‚ÇÅ) =
      sum~ (cct-consis c1t c2t) (cct-consis c1t‚ÇÅ c2t‚ÇÅ)
  cct-consis (c-sum c1t c1t‚ÇÅ) c-unk = unk~R
  cct-consis c-unk c2t = unk~L

  cct-c‚äî' : ‚àÄ{G1 G2 T} {c : G1 ~ G2} ‚Üí (c1 : Conc G1 T) ‚Üí (c2 : Conc G2 T)
           ‚Üí Conc ((G1 ‚äî G2){c}) T
  cct-c‚äî' {` Œπ}{` Œπ}{c = c} c-base c-base with (` Œπ `‚äî ` Œπ){c}
  ... | ‚ü® T , ‚ü® ‚ü® base‚äë , base‚äë ‚ü© , b ‚ü© ‚ü© = c-base
  cct-c‚äî' {` Œπ}{‚ãÜ}{c = c} c-base c-unk with (` Œπ `‚äî ‚ãÜ){c}
  ... | ‚ü® T , ‚ü® ‚ü® base‚äë , unk‚äë ‚ü© , b ‚ü© ‚ü© = c-base
  cct-c‚äî'{c = fun~ c1 c2} (c-fun c1t c1t‚ÇÅ) (c-fun c2t c2t‚ÇÅ) =
      c-fun (cct-c‚äî' {c = c1} c2t c1t) (cct-c‚äî' {c = c2} c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî'{c = unk~R} (c-fun c1t c1t‚ÇÅ) c-unk = c-fun c1t c1t‚ÇÅ
  cct-c‚äî'{c = pair~ c1 c2} (c-pair c1t c1t‚ÇÅ) (c-pair c2t c2t‚ÇÅ) =
      c-pair (cct-c‚äî' {c = c1} c1t c2t) (cct-c‚äî' {c = c2} c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî'{c = unk~R} (c-pair c1t c1t‚ÇÅ) c-unk = c-pair c1t c1t‚ÇÅ
  cct-c‚äî'{c = sum~ c1 c2} (c-sum c1t c1t‚ÇÅ) (c-sum c2t c2t‚ÇÅ) =
      c-sum (cct-c‚äî' {c = c1} c1t c2t) (cct-c‚äî' {c = c2} c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî'{c = unk~R} (c-sum c1t c1t‚ÇÅ) c-unk = c-sum c1t c1t‚ÇÅ
  cct-c‚äî'{‚ãÜ}{G2}{c = unk~L} c-unk c2t with (‚ãÜ `‚äî G2){unk~L}
  ... | ‚ü® T , ‚ü® ‚ü® x , y ‚ü© , b ‚ü© ‚ü© = c2t
  cct-c‚äî' {‚ãÜ} {‚ãÜ} {c = unk~R {‚ãÜ}} c-unk c-unk = c-unk

  cct-c‚äî : ‚àÄ{G1 G2 T} ‚Üí (c1 : Conc G1 T) ‚Üí (c2 : Conc G2 T)
           ‚Üí Conc ((G1 ‚äî G2){cct-consis c1 c2}) T
  cct-c‚äî c-base c-base = c-base
  cct-c‚äî c-base c-unk = c-base
  cct-c‚äî (c-fun c1t c1t‚ÇÅ) (c-fun c2t c2t‚ÇÅ) =
      c-fun (cct-c‚äî c2t c1t) (cct-c‚äî c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî (c-fun c1t c1t‚ÇÅ) c-unk = c-fun c1t c1t‚ÇÅ
  cct-c‚äî (c-pair c1t c1t‚ÇÅ) (c-pair c2t c2t‚ÇÅ) =
      c-pair (cct-c‚äî c1t c2t) (cct-c‚äî c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî (c-pair c1t c1t‚ÇÅ) c-unk = c-pair c1t c1t‚ÇÅ
  cct-c‚äî (c-sum c1t c1t‚ÇÅ) (c-sum c2t c2t‚ÇÅ) =
      c-sum (cct-c‚äî c1t c2t) (cct-c‚äî c1t‚ÇÅ c2t‚ÇÅ)
  cct-c‚äî (c-sum c1t c1t‚ÇÅ) c-unk = c-sum c1t c1t‚ÇÅ
  cct-c‚äî c-unk c2t = c2t

  c‚äî-cct : ‚àÄ{G1 G2 T c} ‚Üí Conc ((G1 ‚äî G2){c}) T
         ‚Üí (Conc G1 T √ó Conc G2 T)
  c‚äî-cct {.‚ãÜ} {G2} {T} {unk~L} ct = ‚ü® c-unk , ct ‚ü©
  c‚äî-cct {G1} {.‚ãÜ} {T} {unk~R} ct = ‚ü® ct , c-unk ‚ü©
  c‚äî-cct {.(` _)} {.(` _)} {T} {base~} ct = ‚ü® ct , ct ‚ü©
  c‚äî-cct {A‚ÇÅ ‚áí A‚ÇÇ} {B‚ÇÅ ‚áí B‚ÇÇ} {T‚ÇÅ ‚áí T‚ÇÇ} {fun~ c c‚ÇÅ} (c-fun ct ct‚ÇÅ) 
      with c‚äî-cct {c = c} ct | c‚äî-cct {c = c‚ÇÅ} ct‚ÇÅ
  ... | ‚ü® cb1 , ca1 ‚ü© | ‚ü® cb2 , ba2 ‚ü© = 
        ‚ü® (c-fun ca1 cb2) , (c-fun cb1 ba2) ‚ü©
  c‚äî-cct {A‚ÇÅ `√ó A‚ÇÇ} {B‚ÇÅ `√ó B‚ÇÇ} {T‚ÇÅ `√ó T‚ÇÇ} {pair~ c c‚ÇÅ} (c-pair ct ct‚ÇÅ)
      with c‚äî-cct {c = c} ct | c‚äî-cct {c = c‚ÇÅ} ct‚ÇÅ
  ... | ‚ü® cb1 , ca1 ‚ü© | ‚ü® cb2 , ba2 ‚ü© = 
        ‚ü® (c-pair cb1 cb2) , (c-pair ca1 ba2) ‚ü©
  c‚äî-cct {A‚ÇÅ `‚äé A‚ÇÇ} {B‚ÇÅ `‚äé B‚ÇÇ} {T‚ÇÅ `‚äé T‚ÇÇ} {sum~ c c‚ÇÅ} (c-sum ct ct‚ÇÅ)
      with c‚äî-cct {c = c} ct | c‚äî-cct {c = c‚ÇÅ} ct‚ÇÅ
  ... | ‚ü® cb1 , ca1 ‚ü© | ‚ü® cb2 , ba2 ‚ü© = 
        ‚ü® (c-sum cb1 cb2) , (c-sum ca1 ba2 ) ‚ü©

  _iff_ : Set ‚Üí Set ‚Üí Set
  P iff Q = (P ‚Üí Q) √ó (Q ‚Üí P)

  prop-17 : ‚àÄ{G1 G2 T} ‚Üí
     (Œ£[ c ‚àà G1 ~ G2 ] Conc ((G1 ‚äî G2){c}) T) iff (Conc G1 T √ó Conc G2 T)
  prop-17 {G1}{G2}{T} = ‚ü® G , H ‚ü©
    where G : Œ£-syntax (G1 ~ G2) (Œª c ‚Üí Conc ((G1 ‚äî G2){c}) T) ‚Üí
               Conc G1 T √ó Conc G2 T
          G ‚ü® fst , snd ‚ü© = c‚äî-cct {G1}{G2}{T}{fst} snd

          H : Conc G1 T √ó Conc G2 T ‚Üí
                 Œ£-syntax (G1 ~ G2) (Œª c ‚Üí Conc ((G1 ‚äî G2){c}) T)
          H ‚ü® fst , snd ‚ü© = ‚ü® (cct-consis fst snd) , (cct-c‚äî fst snd) ‚ü©

  I= : Type ‚Üí Type ‚Üí Type ‚Üí Type ‚Üí Set‚ÇÅ 
  I= = Interior {lzero} STypeEq

  conc-prec : ‚àÄ{G : Type}{T : SType} ‚Üí Conc G T ‚Üí G ‚äë to-type T
  conc-prec c-base = base‚äë
  conc-prec (c-fun g-t g-t‚ÇÅ) = fun‚äë (conc-prec g-t) (conc-prec g-t‚ÇÅ)
  conc-prec (c-pair g-t g-t‚ÇÅ) = pair‚äë (conc-prec g-t) (conc-prec g-t‚ÇÅ)
  conc-prec (c-sum g-t g-t‚ÇÅ) = sum‚äë (conc-prec g-t) (conc-prec g-t‚ÇÅ)
  conc-prec c-unk = unk‚äë

  to-type-base : ‚àÄ{T Œπ} ‚Üí (` Œπ) ‚â° to-type T  ‚Üí  T ‚â° (` Œπ)
  to-type-base {` Œπ'} refl = refl
  to-type-base {T ‚áí T‚ÇÅ} ()
  to-type-base {T‚ÇÅ `√ó T‚ÇÇ} ()
  to-type-base {T‚ÇÅ `‚äé T‚ÇÇ} ()

  cong‚áíL : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ ‚áí G‚ÇÇ) (T‚ÇÅ ‚áí T‚ÇÇ)) ‚Üí G‚ÇÅ ‚â° T‚ÇÅ
  cong‚áíL refl = refl

  cong‚áíR : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ ‚áí G‚ÇÇ) (T‚ÇÅ ‚áí T‚ÇÇ)) ‚Üí G‚ÇÇ ‚â° T‚ÇÇ
  cong‚áíR refl = refl

  cong√óL : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ `√ó G‚ÇÇ) (T‚ÇÅ `√ó T‚ÇÇ)) ‚Üí G‚ÇÅ ‚â° T‚ÇÅ
  cong√óL refl = refl

  cong√óR : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ `√ó G‚ÇÇ) (T‚ÇÅ `√ó T‚ÇÇ)) ‚Üí G‚ÇÇ ‚â° T‚ÇÇ
  cong√óR refl = refl

  cong‚äéL : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ `‚äé G‚ÇÇ) (T‚ÇÅ `‚äé T‚ÇÇ)) ‚Üí G‚ÇÅ ‚â° T‚ÇÅ
  cong‚äéL refl = refl

  cong‚äéR : ‚àÄ{G‚ÇÅ G‚ÇÇ T‚ÇÅ T‚ÇÇ : Type} ‚Üí (_‚â°_ {a = lzero}{A = Type} (G‚ÇÅ `‚äé G‚ÇÇ) (T‚ÇÅ `‚äé T‚ÇÇ)) ‚Üí G‚ÇÇ ‚â° T‚ÇÇ
  cong‚äéR refl = refl

  to-type-fun : ‚àÄ{T G‚ÇÅ G‚ÇÇ} ‚Üí (G‚ÇÅ ‚áí G‚ÇÇ) ‚â° to-type T
        ‚Üí  Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
           T ‚â° T‚ÇÅ ‚áí T‚ÇÇ √ó G‚ÇÅ ‚â° to-type T‚ÇÅ √ó G‚ÇÇ ‚â° to-type T‚ÇÇ
  to-type-fun {` x} ()
  to-type-fun {T‚ÇÅ ‚áí T‚ÇÇ} g12-t =
      ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® cong‚áíL g12-t , cong‚áíR g12-t ‚ü© ‚ü© ‚ü© ‚ü©
  to-type-fun {T `√ó T‚ÇÅ} ()
  to-type-fun {T `‚äé T‚ÇÅ} ()

  to-type-pair : ‚àÄ{T G‚ÇÅ G‚ÇÇ} ‚Üí (G‚ÇÅ `√ó G‚ÇÇ) ‚â° to-type T
        ‚Üí  Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
           T ‚â° T‚ÇÅ `√ó T‚ÇÇ √ó G‚ÇÅ ‚â° to-type T‚ÇÅ √ó G‚ÇÇ ‚â° to-type T‚ÇÇ
  to-type-pair {` x} ()
  to-type-pair {T ‚áí T‚ÇÅ} ()
  to-type-pair {T‚ÇÅ `√ó T‚ÇÇ} g12-t =
      ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® cong√óL g12-t , cong√óR g12-t ‚ü© ‚ü© ‚ü© ‚ü©
  to-type-pair {T `‚äé T‚ÇÅ} ()

  to-type-sum : ‚àÄ{T G‚ÇÅ G‚ÇÇ} ‚Üí (G‚ÇÅ `‚äé G‚ÇÇ) ‚â° to-type T
        ‚Üí  Œ£[ T‚ÇÅ ‚àà SType ] Œ£[ T‚ÇÇ ‚àà SType ]
           T ‚â° T‚ÇÅ `‚äé T‚ÇÇ √ó G‚ÇÅ ‚â° to-type T‚ÇÅ √ó G‚ÇÇ ‚â° to-type T‚ÇÇ
  to-type-sum {` x} ()
  to-type-sum {T ‚áí T‚ÇÅ} ()
  to-type-sum {T `√ó T‚ÇÅ} ()
  to-type-sum {T‚ÇÅ `‚äé T‚ÇÇ} g12-t =
      ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® refl , ‚ü® cong‚äéL g12-t , cong‚äéR g12-t ‚ü© ‚ü© ‚ü© ‚ü©

  prec-conc : ‚àÄ{G G' : Type}{T : SType} ‚Üí G ‚äë G' ‚Üí G' ‚â° to-type T ‚Üí Conc G T
  prec-conc unk‚äë g'-t = c-unk
  prec-conc base‚äë g'-t rewrite to-type-base g'-t = c-base
  prec-conc (fun‚äë g-g' g-g'') g'-t
      with to-type-fun g'-t
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® T‚â°T‚ÇÅ‚áíT‚ÇÇ , ‚ü® G‚ÇÅ‚â°T‚ÇÅ , G‚ÇÇ‚â°T‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
      rewrite G‚ÇÅ‚â°T‚ÇÅ | G‚ÇÇ‚â°T‚ÇÇ | T‚â°T‚ÇÅ‚áíT‚ÇÇ =
       c-fun (prec-conc g-g' refl) (prec-conc g-g'' refl)
  prec-conc (pair‚äë g-g' g-g'') g'-t
      with to-type-pair g'-t
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® T‚â°T‚ÇÅ√óT‚ÇÇ , ‚ü® G‚ÇÅ‚â°T‚ÇÅ , G‚ÇÇ‚â°T‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
      rewrite G‚ÇÅ‚â°T‚ÇÅ | G‚ÇÇ‚â°T‚ÇÇ | T‚â°T‚ÇÅ√óT‚ÇÇ =
       c-pair (prec-conc g-g' refl) (prec-conc g-g'' refl)
  prec-conc (sum‚äë g-g' g-g'') g'-t
      with to-type-sum g'-t
  ... | ‚ü® T‚ÇÅ , ‚ü® T‚ÇÇ , ‚ü® T‚â°T‚ÇÅ‚äéT‚ÇÇ , ‚ü® G‚ÇÅ‚â°T‚ÇÅ , G‚ÇÇ‚â°T‚ÇÇ ‚ü© ‚ü© ‚ü© ‚ü©
      rewrite G‚ÇÅ‚â°T‚ÇÅ | G‚ÇÇ‚â°T‚ÇÇ | T‚â°T‚ÇÅ‚äéT‚ÇÇ =
       c-sum (prec-conc g-g' refl) (prec-conc g-g'' refl)

  L=‚ãÜ‚ãÜ : ‚àÄ{T : SType} ‚Üí L STypeEq ‚ãÜ ‚ãÜ T
  L=‚ãÜ‚ãÜ {T} = leftp c-unk c-unk (stype-eq refl)

  L=‚ãÜG‚Üíconc : ‚àÄ{G : Type}{T : SType} ‚Üí L STypeEq ‚ãÜ G T ‚Üí Conc G T
  L=‚ãÜG‚Üíconc {G} {T} (leftp c-unk x‚ÇÅ (stype-eq refl)) = x‚ÇÅ

  L=G‚ãÜ‚Üíconc : ‚àÄ{G : Type}{T : SType} ‚Üí L STypeEq G ‚ãÜ T ‚Üí Conc G T
  L=G‚ãÜ‚Üíconc {G} {T} (leftp x c-unk (stype-eq x‚ÇÅ)) = x

  conc‚ÜíL=G‚ãÜ : ‚àÄ{G : Type}{T : SType} ‚Üí Conc G T ‚Üí L STypeEq G ‚ãÜ T
  conc‚ÜíL=G‚ãÜ c-base = leftp c-base c-unk (stype-eq refl)
  conc‚ÜíL=G‚ãÜ (c-fun cgt cgt‚ÇÅ) = leftp (c-fun cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=G‚ãÜ (c-pair cgt cgt‚ÇÅ) = leftp (c-pair cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=G‚ãÜ (c-sum cgt cgt‚ÇÅ) = leftp (c-sum cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=G‚ãÜ c-unk = leftp c-unk c-unk (stype-eq refl)
  
  conc‚ÜíL=‚ãÜG : ‚àÄ{G : Type}{T : SType} ‚Üí Conc G T ‚Üí L STypeEq G ‚ãÜ T
  conc‚ÜíL=‚ãÜG c-base = leftp c-base c-unk (stype-eq refl)
  conc‚ÜíL=‚ãÜG (c-fun cgt cgt‚ÇÅ) = leftp (c-fun cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=‚ãÜG (c-pair cgt cgt‚ÇÅ) = leftp (c-pair cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=‚ãÜG (c-sum cgt cgt‚ÇÅ) = leftp (c-sum cgt cgt‚ÇÅ) c-unk (stype-eq refl)
  conc‚ÜíL=‚ãÜG c-unk = leftp c-unk c-unk (stype-eq refl)
  
  all-funs-L= : ‚àÄ{G‚ÇÅ G‚ÇÇ G‚ÇÉ G‚ÇÑ} ‚Üí AllFuns (L STypeEq (G‚ÇÅ ‚áí G‚ÇÇ) (G‚ÇÉ ‚áí G‚ÇÑ))
  all-funs-L= {G‚ÇÅ}{G‚ÇÇ}{G‚ÇÉ}{G‚ÇÑ} = funs f
     where f : {T : SType} ‚Üí
             L STypeEq (G‚ÇÅ ‚áí G‚ÇÇ) (G‚ÇÉ ‚áí G‚ÇÑ) T ‚Üí
             Œ£-syntax SType (Œª T‚ÇÅ ‚Üí Œ£-syntax SType (Œª T‚ÇÇ ‚Üí T ‚â° (T‚ÇÅ ‚áí T‚ÇÇ)))
           f {S‚ÇÉ ‚áí S‚ÇÑ} (leftp (c-fun x x‚ÇÉ) (c-fun x‚ÇÅ x‚ÇÑ) x‚ÇÇ) =
               ‚ü® S‚ÇÉ , ‚ü® S‚ÇÑ , refl ‚ü© ‚ü©

  Œ≥‚äî : (G‚ÇÅ : Type) ‚Üí (G‚ÇÇ : Type) ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ) ‚Üí SType ‚Üí Set
  Œ≥‚äî G‚ÇÅ G‚ÇÇ c T = Conc ((G‚ÇÅ ‚äî G‚ÇÇ){c}) T

  L=‚ÜíConc‚äî : ‚àÄ {G‚ÇÅ G‚ÇÇ T} ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ) ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T ‚Üí Œ≥‚äî G‚ÇÅ G‚ÇÇ c T
  L=‚ÜíConc‚äî{G‚ÇÅ}{G‚ÇÇ}{T} c l =
     cct-c‚äî' {c = c} (proj‚ÇÅ (L=‚Üícc l)) (proj‚ÇÇ (L=‚Üícc l))

  Conc‚äî‚ÜíL= : ‚àÄ {G‚ÇÅ G‚ÇÇ T} ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ) ‚Üí (Œ≥‚äî G‚ÇÅ G‚ÇÇ c T) ‚Üí L STypeEq G‚ÇÅ G‚ÇÇ T 
  Conc‚äî‚ÜíL= {G‚ÇÅ} {G‚ÇÇ} {T} c T‚ààŒ≥G‚ÇÅ‚äîG‚ÇÇ with prop-17{G‚ÇÅ}{G‚ÇÇ}{T}
  ... | ‚ü® f , g ‚ü©
      with f ‚ü® c , T‚ààŒ≥G‚ÇÅ‚äîG‚ÇÇ ‚ü©
  ... | ‚ü® a , b ‚ü© = cc‚ÜíL= a b 

  Conc‚äî‚áîL= : ‚àÄ {G‚ÇÅ G‚ÇÇ} ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ) ‚Üí (Œ≥‚äî G‚ÇÅ G‚ÇÇ c) ‚áî L STypeEq G‚ÇÅ G‚ÇÇ
  Conc‚äî‚áîL= c = ‚ü® Conc‚äî‚ÜíL= c , L=‚ÜíConc‚äî c ‚ü©

  Trans‚áî : ‚àÄ{P Q R} ‚Üí P ‚áî Q ‚Üí Q ‚áî R ‚Üí P ‚áî R
  Trans‚áî pq qr = ‚ü® (Œª {T} z ‚Üí proj‚ÇÅ qr (proj‚ÇÅ pq z)) , (Œª {T} z ‚Üí proj‚ÇÇ pq (proj‚ÇÇ qr z)) ‚ü©

  abs-Œ≥‚äî : ‚àÄ {G‚ÇÅ G‚ÇÇ} ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ)
         ‚Üí Abs (Œ≥‚äî G‚ÇÅ G‚ÇÇ c) ((G‚ÇÅ ‚äî G‚ÇÇ) {c})
  abs-Œ≥‚äî {G‚ÇÅ}{G‚ÇÇ} c = conc-abs-id2{P = (Œ≥‚äî G‚ÇÅ G‚ÇÇ c)}
        
  prop-16 : ‚àÄ {G‚ÇÅ G‚ÇÇ} ‚Üí (c : G‚ÇÅ ~ G‚ÇÇ) ‚Üí I= G‚ÇÅ G‚ÇÇ ((G‚ÇÅ ‚äî G‚ÇÇ){c}) ((G‚ÇÅ ‚äî G‚ÇÇ){c})
  prop-16 {G‚ÇÅ}{G‚ÇÇ} c =
     inter (abs-equiv (abs-Œ≥‚äî c) (Conc‚äî‚áîL= c))
           (abs-equiv (abs-Œ≥‚äî c) (Trans‚áî (Conc‚äî‚áîL= c) (Sym‚áî (L=‚áîR= {G‚ÇÅ}{G‚ÇÇ}))))

  STypeEq‚áí : ‚àÄ {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ : SType}
           ‚Üí STypeEq T‚ÇÅ T‚ÇÉ ‚Üí STypeEq T‚ÇÇ T‚ÇÑ
           ‚Üí STypeEq (T‚ÇÅ ‚áí T‚ÇÇ) (T‚ÇÉ ‚áí T‚ÇÑ)
  STypeEq‚áí (stype-eq refl) (stype-eq refl) = stype-eq refl

  {- 

   In AGT with simple types, casts are a triple of types where the
   middle type is an upper bound of the source and target, which
   corresponds to the threesomes of Siek and Wadler (2010).

   -}

  data Cast : Type ‚Üí Set where
    _‚áí_‚áí_ : (A : Type) ‚Üí (B : Type) ‚Üí (C : Type)
          ‚Üí {ab : A ‚äë B } ‚Üí {cb : C ‚äë B} ‚Üí Cast (A ‚áí C)
    error : (A : Type) ‚Üí (B : Type) ‚Üí Cast (A ‚áí B)

  import ParamCastCalculus
  module CastCalc = ParamCastCalculus Cast
  open CastCalc
  
  {-

   OBSOLETE, NEEDS TO BE UPDATED, EVEN LESS LIKE AGT NOW

   The identity casts (at base type) and error casts are active. All
   the other casts are inert. This treatment of identity casts as
   active is a bit different from the AGT paper, but I think it is
   nicer.

   -}

  data Inert : ‚àÄ{A} ‚Üí Cast A ‚Üí Set where
    inert : ‚àÄ{A B C} {ab : A ‚äë B} {cb : C ‚äë B}
          ‚Üí ¬¨ (Œ£[ Œπ ‚àà Base ] A ‚â° ` Œπ √ó C ‚â° ` Œπ)
          ‚Üí A ‚â¢ ‚ãÜ
          ‚Üí Inert ((A ‚áí B ‚áí C){ab}{cb})

  data Active : ‚àÄ{A} ‚Üí Cast A ‚Üí Set where
    activeId : ‚àÄ {Œπ : Base}{ab}{cb} ‚Üí Active (((` Œπ) ‚áí (` Œπ) ‚áí (` Œπ)){ab}{cb})
    activeError : ‚àÄ {A B} ‚Üí Active (error A B)
    activeA‚ãÜ : ‚àÄ{B C}{ab : ‚ãÜ ‚äë B}{cb : C ‚äë B} ‚Üí Active ((‚ãÜ ‚áí B ‚áí C) {ab}{cb})

  baseAndEq? : (A : Type) ‚Üí (B : Type) ‚Üí Dec (Œ£[ Œπ ‚àà Base ] A ‚â° ` Œπ √ó B ‚â° ` Œπ)
  baseAndEq? A B
      with base? A | base? B
  ... | yes ba | no bb = no G
        where G : ¬¨ Œ£ Base (Œª Œπ ‚Üí Œ£ (A ‚â° ` Œπ) (Œª x ‚Üí B ‚â° ` Œπ))
              G ‚ü® fst‚ÇÅ , ‚ü® _ , snd‚ÇÅ ‚ü© ‚ü© =
                 contradiction ‚ü® fst‚ÇÅ , snd‚ÇÅ ‚ü© bb
  ... | no ba | _ = no G
        where G : ¬¨ Œ£ Base (Œª Œπ ‚Üí Œ£ (A ‚â° ` Œπ) (Œª x ‚Üí B ‚â° ` Œπ))
              G ‚ü® fst‚ÇÅ , ‚ü® fst‚ÇÇ , _ ‚ü© ‚ü© =
                 contradiction ‚ü® fst‚ÇÅ , fst‚ÇÇ ‚ü© ba
  ... | yes ‚ü® Œπ‚ÇÅ , refl ‚ü© | yes ‚ü® Œπ‚ÇÇ , refl ‚ü©
      with base-eq? Œπ‚ÇÅ Œπ‚ÇÇ
  ... | yes eq rewrite eq = yes ‚ü® Œπ‚ÇÇ , ‚ü® refl , refl ‚ü© ‚ü©
  ... | no neq = no G
      where G : ¬¨ Œ£ Base (Œª Œπ ‚Üí Œ£ (A ‚â° ` Œπ) (Œª x ‚Üí B ‚â° ` Œπ))
            G ‚ü® fst‚ÇÅ , ‚ü® refl , refl ‚ü© ‚ü© = neq refl

  ActiveOrInert : ‚àÄ{A} ‚Üí (c : Cast A) ‚Üí Active c ‚äé Inert c
  ActiveOrInert {.(A ‚áí C)} ((A ‚áí B ‚áí C){ab}{cb})
      with baseAndEq? A C
  ... | no nbe
      with eq-unk A
  ... | yes A‚â°‚ãÜ rewrite A‚â°‚ãÜ = inj‚ÇÅ activeA‚ãÜ
  ... | no A‚â¢‚ãÜ = inj‚ÇÇ (inert nbe A‚â¢‚ãÜ)
  ActiveOrInert {.(A ‚áí C)} ((A ‚áí B ‚áí C){ab}{cb})
      | yes ‚ü® Œπ , ‚ü® A‚â°Œπ , C‚â°Œπ ‚ü© ‚ü© rewrite A‚â°Œπ | C‚â°Œπ
      with ‚äëRBase cb
  ... | b=c rewrite b=c = inj‚ÇÅ activeId
  ActiveOrInert {.(A ‚áí B)} (error A B) = inj‚ÇÅ activeError

  data Cross : ‚àÄ {A} ‚Üí Cast A ‚Üí Set where
    C-fun : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ C‚ÇÅ C‚ÇÇ ab cb}
          ‚Üí Cross (((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí (B‚ÇÅ ‚áí B‚ÇÇ) ‚áí (C‚ÇÅ ‚áí C‚ÇÇ)){ab}{cb})
    C-pair : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ C‚ÇÅ C‚ÇÇ ab cb}
          ‚Üí Cross (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí (B‚ÇÅ `√ó B‚ÇÇ) ‚áí (C‚ÇÅ `√ó C‚ÇÇ)){ab}{cb})
    C-sum : ‚àÄ{A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ C‚ÇÅ C‚ÇÇ ab cb}
          ‚Üí Cross (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí (B‚ÇÅ `‚äé B‚ÇÇ) ‚áí (C‚ÇÅ `‚äé C‚ÇÇ)){ab}{cb})

  Inert-Cross‚áí : ‚àÄ{A C D} ‚Üí (c : Cast (A ‚áí (C ‚áí D))) ‚Üí (i : Inert c)
              ‚Üí Cross c √ó Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ ‚áí A‚ÇÇ
  Inert-Cross‚áí ((A ‚áí B ‚áí (C‚ÇÅ ‚áí C‚ÇÇ)){ab}{cb}) (inert ¬¨b ¬¨‚ãÜ) 
      with ‚äëR‚áí cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12
      with ‚äëL‚áí ab
  ... | inj‚ÇÅ A‚â°‚ãÜ = ‚ä•-elim (¬¨‚ãÜ A‚â°‚ãÜ)
  ... | inj‚ÇÇ ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , ‚ü® A=A‚ÇÅ‚áíA‚ÇÇ , ‚ü® A1‚äëB1 , A2‚äëB2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite A=A‚ÇÅ‚áíA‚ÇÇ =
        ‚ü® C-fun , ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , refl ‚ü© ‚ü© ‚ü©

  Inert-Cross√ó : ‚àÄ{A C D} ‚Üí (c : Cast (A ‚áí (C `√ó D))) ‚Üí (i : Inert c)
              ‚Üí Cross c √ó Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ `√ó A‚ÇÇ
  Inert-Cross√ó ((.‚ãÜ ‚áí .(_ `√ó _) ‚áí .(_ `√ó _)) {unk‚äë} {pair‚äë cb cb‚ÇÅ}) (inert x x‚ÇÅ) =
      ‚ä•-elim (x‚ÇÅ refl)
  Inert-Cross√ó (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí (B‚ÇÅ `√ó B‚ÇÇ) ‚áí (C‚ÇÅ `√ó C‚ÇÇ)) {pair‚äë ab ab‚ÇÅ} {pair‚äë cb cb‚ÇÅ})
      (inert x x‚ÇÅ) =
      ‚ü® C-pair , ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , refl ‚ü© ‚ü© ‚ü©

  Inert-Cross‚äé : ‚àÄ{A C D} ‚Üí (c : Cast (A ‚áí (C `‚äé D))) ‚Üí (i : Inert c)
              ‚Üí Cross c √ó Œ£[ A‚ÇÅ ‚àà Type ] Œ£[ A‚ÇÇ ‚àà Type ] A ‚â° A‚ÇÅ `‚äé A‚ÇÇ
  Inert-Cross‚äé ((_ ‚áí _ ‚áí .(_ `‚äé _)) {unk‚äë} {sum‚äë cb cb‚ÇÅ}) (inert x x‚ÇÅ) =
      ‚ä•-elim (x‚ÇÅ refl)
  Inert-Cross‚äé (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí (B‚ÇÅ `‚äé B‚ÇÇ) ‚áí (C‚ÇÅ `‚äé C‚ÇÇ)) {sum‚äë ab ab‚ÇÅ} {sum‚äë cb cb‚ÇÅ})
      (inert x x‚ÇÅ) =
      ‚ü® C-sum , ‚ü® A‚ÇÅ , ‚ü® A‚ÇÇ , refl ‚ü© ‚ü© ‚ü©

  dom : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí (A' ‚áí B'))) ‚Üí Cross c
         ‚Üí Cast (A' ‚áí A‚ÇÅ)
  dom (((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ ‚áí C‚ÇÇ)){ab}{cb}) (C-fun)
      with ‚äëR‚áí cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | fun‚äë ab1 ab2 = (C‚ÇÅ ‚áí B‚ÇÅ ‚áí A‚ÇÅ){c1‚äëb1}{ab1}

  cod : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí (A' ‚áí B'))) ‚Üí Cross c
         ‚Üí  Cast (A‚ÇÇ ‚áí B')
  cod (((A‚ÇÅ ‚áí A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ ‚áí C‚ÇÇ)){ab}{cb}) (C-fun)
      with ‚äëR‚áí cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | fun‚äë ab1 ab2 = (A‚ÇÇ ‚áí B‚ÇÇ ‚áí C‚ÇÇ){ab2}{c2‚äëb2}

  fstC : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí (A' `√ó B'))) ‚Üí Cross c
         ‚Üí Cast (A‚ÇÅ ‚áí A')
  fstC (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ `√ó C‚ÇÇ)){ab}{cb}) (C-pair)
      with ‚äëR√ó cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | pair‚äë ab1 ab2 = (A‚ÇÅ ‚áí B‚ÇÅ ‚áí C‚ÇÅ){ab1}{c1‚äëb1}

  sndC : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ `√ó A‚ÇÇ) ‚áí (A' `√ó B'))) ‚Üí Cross c
         ‚Üí  Cast (A‚ÇÇ ‚áí B')
  sndC (((A‚ÇÅ `√ó A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ `√ó C‚ÇÇ)){ab}{cb}) (C-pair)
      with ‚äëR√ó cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | pair‚äë ab1 ab2 = (A‚ÇÇ ‚áí B‚ÇÇ ‚áí C‚ÇÇ){ab2}{c2‚äëb2}

  inlC : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí (A' `‚äé B'))) ‚Üí Cross c
         ‚Üí Cast (A‚ÇÅ ‚áí A')
  inlC (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ `‚äé C‚ÇÇ)){ab}{cb}) (C-sum)
      with ‚äëR‚äé cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | sum‚äë ab1 ab2 = (A‚ÇÅ ‚áí B‚ÇÅ ‚áí C‚ÇÅ){ab1}{c1‚äëb1}

  inrC : ‚àÄ{A‚ÇÅ A‚ÇÇ A' B'} ‚Üí (c : Cast ((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí (A' `‚äé B'))) ‚Üí Cross c
         ‚Üí  Cast (A‚ÇÇ ‚áí B')
  inrC (((A‚ÇÅ `‚äé A‚ÇÇ) ‚áí B ‚áí (C‚ÇÅ `‚äé C‚ÇÇ)){ab}{cb}) (C-sum)
      with ‚äëR‚äé cb
  ... | ‚ü® B‚ÇÅ , ‚ü® B‚ÇÇ , ‚ü® b=b12 , ‚ü® c1‚äëb1 , c2‚äëb2 ‚ü© ‚ü© ‚ü© ‚ü© rewrite b=b12 
      with ab
  ... | sum‚äë ab1 ab2 = (A‚ÇÇ ‚áí B‚ÇÇ ‚áí C‚ÇÇ){ab2}{c2‚äëb2}

  baseNotInert : ‚àÄ {A Œπ} ‚Üí (c : Cast (A ‚áí ` Œπ)) ‚Üí ¬¨ Inert c
  baseNotInert ((A ‚áí B ‚áí (` Œπ)) {ab} {cb}) (inert x A‚â¢‚ãÜ)
      with ‚äëRBase cb
  ... | b‚â°c rewrite b‚â°c
      with ‚äëLBase ab
  ... | inj‚ÇÅ eq rewrite eq = x ‚ü® Œπ , ‚ü® refl , refl ‚ü© ‚ü©
  ... | inj‚ÇÇ eq‚ãÜ = contradiction eq‚ãÜ A‚â¢‚ãÜ

{-  
  baseNotInert : ‚àÄ {A Œπ} ‚Üí (c : Cast (A ‚áí ` Œπ)) ‚Üí A ‚â¢ ‚ãÜ ‚Üí ¬¨ Inert c
  baseNotInert ((A ‚áí B ‚áí (` Œπ)){ab}{cb}) A‚â¢‚ãÜ (inert p)
      with ‚äëRBase cb
  ... | b‚â°c rewrite b‚â°c
      with ‚äëLBase ab
  ... | inj‚ÇÅ eq rewrite eq = ‚ü® Œπ , ‚ü® refl , refl ‚ü© ‚ü©
  ... | inj‚ÇÇ eq‚ãÜ = contradiction eq‚ãÜ A‚â¢‚ãÜ
  baseNotInert (error A B) A‚ãÜ = Œª ()
-}

  open import PreCastStructure
  
  pcs : PreCastStruct
  pcs = record
             { Cast = Cast
             ; Inert = Inert
             ; Active = Active
             ; ActiveOrInert = ActiveOrInert
             ; Cross = Cross
             ; Inert-Cross‚áí = Inert-Cross‚áí
             ; Inert-Cross√ó = Inert-Cross√ó
             ; Inert-Cross‚äé = Inert-Cross‚äé
             ; dom = dom
             ; cod = cod
             ; fstC = fstC
             ; sndC = sndC
             ; inlC = inlC
             ; inrC = inrC
             ; baseNotInert = baseNotInert
             }

  import EfficientParamCastAux
  open EfficientParamCastAux pcs

  compose : ‚àÄ{A B C} ‚Üí Cast (A ‚áí B) ‚Üí Cast (B ‚áí C) ‚Üí Cast (A ‚áí C)
  compose ((A ‚áí B ‚áí C){ab}{cb}) ((C ‚áí B' ‚áí C'){cb'}{c'b'})
      with B `~ B'
  ... | no nc = error A C' 
  ... | yes B~B'
      with (B `‚äî B') {B~B'}
  ... | ‚ü® B‚äîB' , ‚ü® ‚ü® B‚äëB‚äîB' , B'‚äëB‚äîB' ‚ü© , lb ‚ü© ‚ü© =
         (A ‚áí B‚äîB' ‚áí C'){Trans‚äë ab B‚äëB‚äîB'}{Trans‚äë c'b' B'‚äëB‚äîB'}
  compose (A ‚áí B ‚áí C) (error C C') = (error A C')
  compose (error A B) (error B C) = (error A C)
  compose (error A B) (B ‚áí B' ‚áí C) = (error A C)

  applyCast : ‚àÄ {Œì A B} ‚Üí (M : Œì ‚ä¢ A) ‚Üí (Value M) ‚Üí (c : Cast (A ‚áí B))
            ‚Üí ‚àÄ {a : Active c} ‚Üí Œì ‚ä¢ B
  applyCast M v .(_ ‚áí _ ‚áí _) {activeId} = M
  applyCast M (EfficientParamCastAux.S-val x) .(‚ãÜ ‚áí _ ‚áí _) {activeA‚ãÜ} =
    ‚ä•-elim (simple‚ãÜ M x refl)
  applyCast (M ‚ü® c ‚ü©) (V-cast {i = inert x A‚â¢‚ãÜ} sv) d {activeA‚ãÜ} = M ‚ü® compose c d ‚ü©
  applyCast M v (error _ _) {activeError} = blame (pos zero)
  
  height : ‚àÄ{A B} ‚Üí (c : Cast (A ‚áí B)) ‚Üí ‚Ñï
  height (_ ‚áí B ‚áí _) = height-t B
  height (error _ _) = 0

  height-lb : ‚àÄ{BB' B B' : Type}
     ‚Üí (‚àÄ {C' : Type} ‚Üí Œ£ (B ‚äë C') (Œª x ‚Üí B' ‚äë C') ‚Üí BB' ‚äë C')
     ‚Üí B ~ B'
     ‚Üí height-t BB' ‚â§ height-t B ‚à® height-t B'
  height-lb {‚ãÜ} {B} {B'} lb B~B' = z‚â§n
  height-lb {` x} {B} {B'} lb B~B' = z‚â§n
  height-lb {BB' ‚áí BB''} {B} {B'} lb B~B' = {!!}
  height-lb {BB' `√ó BB''} {B} {B'} lb B~B' = {!!}
  height-lb {BB' `‚äé BB''} {B} {B'} lb B~B' = {!!}

  compose-height : ‚àÄ {A B C} ‚Üí (s : Cast (A ‚áí B)) (t : Cast (B ‚áí C))
     ‚Üí height (compose s t) ‚â§ (height s) ‚à® (height t)
  compose-height (_ ‚áí B ‚áí _) (_ ‚áí B' ‚áí _)
      with B `~ B'
  ... | no nc = z‚â§n
  ... | yes B~B'
      with (B `‚äî B') {B~B'}
  ... | ‚ü® B‚äîB' , ‚ü® ‚ü® B‚äëB‚äîB' , B'‚äëB‚äîB' ‚ü© , lb ‚ü© ‚ü© =
      {!!}
  compose-height (_ ‚áí B ‚áí _) (error _ _) = z‚â§n
  compose-height (error _ _) (_ ‚áí B ‚áí _) = z‚â§n
  compose-height (error _ _) (error _ _) = z‚â§n

  applyCastOK : ‚àÄ{Œì A B}{M : Œì ‚ä¢ A}{c : Cast (A ‚áí B)}{n}{a}
          ‚Üí n ‚à£ false ‚ä¢ M ok ‚Üí (v : Value M)
          ‚Üí Œ£[ m ‚àà ‚Ñï ] m ‚à£ false ‚ä¢ applyCast M v c {a} ok √ó m ‚â§ 2 + n
  applyCastOK {M = M}{c}{n}{a} Mok v = {!!}
     
  open import CastStructure

  ecs : EfficientCastStruct
  ecs = record
             { precast = pcs
             ; applyCast = applyCast
             ; compose = compose
             ; height = height
             ; compose-height = compose-height
             ; applyCastOK = applyCastOK
             }
             
  open EfficientCastStruct ecs using (c-height)
  import EfficientParamCasts
  open EfficientParamCasts ecs public

  applyCast-height : ‚àÄ{Œì}{A B}{V}{v : Value {Œì} V}{c : Cast (A ‚áí B)}
        {a : Active c}
      ‚Üí c-height (applyCast V v c {a}) ‚â§ c-height V ‚à® height c
  applyCast-height {V = V}{v}{c}{a} = {!!}

  dom-height : ‚àÄ{A B C D}{c : Cast ((A ‚áí B) ‚áí (C ‚áí D))}{x : Cross c}
       ‚Üí height (dom c x) ‚â§ height c
  dom-height {c = c} {x} = {!!}
  
  cod-height : ‚àÄ{A B C D}{c : Cast ((A ‚áí B) ‚áí (C ‚áí D))}{x : Cross c}
       ‚Üí height (cod c x) ‚â§ height c
  cod-height {c = c} {x} = {!!}
  
  fst-height : ‚àÄ{A B C D}{c : Cast (A `√ó B ‚áí C `√ó D)}{x : Cross c}
       ‚Üí height (fstC c x) ‚â§ height c
  fst-height {c = c}{x} = {!!}
  
  snd-height : ‚àÄ{A B C D}{c : Cast (A `√ó B ‚áí C `√ó D)}{x : Cross c}
       ‚Üí height (sndC c x) ‚â§ height c
  snd-height {c = c}{x} = {!!}
  
  inlC-height : ‚àÄ{A B C D}{c : Cast (A `‚äé B ‚áí C `‚äé D)}{x : Cross c}
       ‚Üí height (inlC c x) ‚â§ height c
  inlC-height {c = c}{x} = {!!}
  
  inrC-height : ‚àÄ{A B C D}{c : Cast (A `‚äé B ‚áí C `‚äé D)}{x : Cross c}
       ‚Üí height (inrC c x) ‚â§ height c
  inrC-height {c = c}{x} = {!!}
  

  ecsh : EfficientCastStructHeight
  ecsh = record
              { effcast = ecs
              ; applyCast-height = (Œª {Œì}{A}{B}{V}{v}{c}{a} ‚Üí applyCast-height{Œì}{A}{B}{V}{v}{c}{a})
              ; dom-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí dom-height{A}{B}{C}{D}{c}{x})
              ; cod-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí cod-height{A}{B}{C}{D}{c}{x})
              ; fst-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí fst-height{A}{B}{C}{D}{c}{x})
              ; snd-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí snd-height{A}{B}{C}{D}{c}{x})
              ; inlC-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí inlC-height{A}{B}{C}{D}{c}{x})
              ; inrC-height = (Œª {A}{B}{C}{D}{c}{x} ‚Üí inrC-height{A}{B}{C}{D}{c}{x})
              }

  import PreserveHeight
  module PH = PreserveHeight ecsh

  preserve-height : ‚àÄ {Œì A} {M M‚Ä≤ : Œì ‚ä¢ A} {ctx : ReductionCtx}
       ‚Üí ctx / M ‚Äî‚Üí M‚Ä≤ ‚Üí c-height M‚Ä≤ ‚â§ c-height M
  preserve-height M‚Äî‚ÜíM‚Ä≤ = PH.preserve-height M‚Äî‚ÜíM‚Ä≤


  import SpaceEfficient
  module SE = SpaceEfficient ecs

  preserve-ok : ‚àÄ{Œì A}{M M‚Ä≤ : Œì ‚ä¢ A}{ctx : ReductionCtx}{n}
          ‚Üí n ‚à£ false ‚ä¢ M ok  ‚Üí  ctx / M ‚Äî‚Üí M‚Ä≤
          ‚Üí Œ£[ m ‚àà ‚Ñï ] m ‚à£ false ‚ä¢ M‚Ä≤ ok √ó m ‚â§ 2 + n
  preserve-ok Mok M‚Äî‚ÜíM‚Ä≤ = SE.preserve-ok Mok M‚Äî‚ÜíM‚Ä≤

  module EC = SE.EfficientCompile {!!}

  open import GTLC
  import GTLC2CC
  module Compile = GTLC2CC Cast {!!}

  compile-efficient : ‚àÄ{Œì A} (M : Term) (d : Œì ‚ä¢G M ‚¶Ç A) (ul : Bool)
      ‚Üí Œ£[ k ‚àà ‚Ñï ] k ‚à£ ul ‚ä¢ (Compile.compile M d) ok √ó k ‚â§ 1
  compile-efficient d ul = EC.compile-efficient d ul
  
  {-

   Alternative idea about evidence.  Use consistency judgements!
   Here's the definition consitentent transitivity.

  -}

  _‚àò_ : ‚àÄ{A B C} ‚Üí (c : A ~ B) ‚Üí (d : B ~ C) ‚Üí Dec (A ~ C)
  unk~L ‚àò d = yes unk~L
  _‚àò_ {A}{‚ãÜ}{C} unk~R unk~L = A `~ C
  unk~R ‚àò unk~R = yes unk~R
  base~ ‚àò d = yes d
  fun~ c‚ÇÅ d‚ÇÅ ‚àò unk~R = yes unk~R
  fun~ c‚ÇÅ d‚ÇÅ ‚àò fun~ c‚ÇÇ d‚ÇÇ
      with c‚ÇÇ ‚àò c‚ÇÅ | d‚ÇÅ ‚àò d‚ÇÇ
  ... | yes c | yes d = yes (fun~ c d)
  ... | yes c | no d = no (¬¨~fR d)
  ... | no c | _ = no (¬¨~fL Œª x ‚Üí c (Sym~ x))
  pair~ c‚ÇÅ d‚ÇÅ ‚àò unk~R = yes unk~R
  pair~ c‚ÇÅ d‚ÇÅ ‚àò pair~ c‚ÇÇ d‚ÇÇ
      with c‚ÇÅ ‚àò c‚ÇÇ | d‚ÇÅ ‚àò d‚ÇÇ
  ... | yes c | yes d = yes (pair~ c d)
  ... | yes c | no d = no (¬¨~pR d)
  ... | no c | _ = no (¬¨~pL c)
  sum~ c‚ÇÅ d‚ÇÅ ‚àò unk~R = yes unk~R
  sum~ c‚ÇÅ d‚ÇÅ ‚àò sum~ c‚ÇÇ d‚ÇÇ
      with c‚ÇÅ ‚àò c‚ÇÇ | d‚ÇÅ ‚àò d‚ÇÇ
  ... | yes c | yes d = yes (sum~ c d)
  ... | yes c | no d = no (¬¨~sR d)
  ... | no c | _ = no (¬¨~sL c)

